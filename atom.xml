<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>冰清璧润-泽清的博客</title>
  
  <subtitle>唐泽清的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zqily.com/"/>
  <updated>2018-07-13T23:34:41.915Z</updated>
  <id>http://zqily.com/</id>
  
  <author>
    <name>唐泽清</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>为什么要写独立博客？</title>
    <link href="http://zqily.com/2018/07/14/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%86%99%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2%EF%BC%9F/"/>
    <id>http://zqily.com/2018/07/14/为什么要写独立博客？/</id>
    <published>2018-07-13T23:18:45.000Z</published>
    <updated>2018-07-13T23:34:41.915Z</updated>
    
    <content type="html"><![CDATA[<p>如果你有一个绝佳的长期写作idea，你会选在哪里发布？微信公众号？知乎？微博？Lofter?简书？Medium？博客？慢着，既然有前面那么多既简单好用，又具备巨大「网络效应」<a href="https://en.wikipedia.org/wiki/Network_effect" target="_blank" rel="noopener">Network Effect</a> 的内容分发平台（或社区），我为什么还需要博客这种既不性感又不易用的过时玩意儿呢？</p><h2 id="1-为什么要选博客"><a href="#1-为什么要选博客" class="headerlink" title="1 为什么要选博客"></a>1 为什么要选博客</h2><p>事实上，如今仍然有很多人在坚持自建独立博客，产出内容。大概每个写博客的人都有自己坚持的理由吧。就我而言，首先考虑博客而不是其他平台，至少有以下两点原因。</p><h3 id="1-1-对搜索引擎更加友好"><a href="#1-1-对搜索引擎更加友好" class="headerlink" title="1.1 对搜索引擎更加友好"></a>1.1 对搜索引擎更加友好</h3><p>相较微博、微信等大多数社交媒体平台，博客对搜索引擎更加友好，也更加开放。多数第三方社交平台，或多或少地会存在搜索引擎收录的问题。而你作为使用者，能为搜索引擎优化做的事情也相当有限。</p><p>也许，相较于其他社区平台的「网络效应」而言，对搜索引擎更友好和开放，可能并不意味着单位时间里更多的流量，但无疑会使得内容可能的覆盖范围更广。而当时间作为横坐标单位时，小流量积累起来的长尾亦会相当可观。</p><h3 id="1-2-弱化社交利于专注内容生产"><a href="#1-2-弱化社交利于专注内容生产" class="headerlink" title="1.2 弱化社交利于专注内容生产"></a>1.2 弱化社交利于专注内容生产</h3><p>如果你想在微博、微信这些社交媒体上创作内容，除非完全不利用原先积累的社交资源，否则势必受其影响。为了完成在新媒体平台上的「自我形象管理」，你在内容生产的时候，或多或少地会被受众特征和形象管理意图所左右。</p><p>与之相对的，博客虽然是一个开放互动平台，但它的互动是基于内容产生的。而且由于博客在社交方面的弱化（或者说不突出），用户因而可以完全免于社交因素的影响，专注于内容创作。</p><h2 id="2-为什么要自建独立博客"><a href="#2-为什么要自建独立博客" class="headerlink" title="2 为什么要自建独立博客"></a>2 为什么要自建独立博客</h2><p>好吧，写博就写博吧，可为啥非得自建独立博客？要说独立博客和托管博客比有啥好处，一言以蔽之：爽。</p><h3 id="2-1-独立博客是一个自由空间"><a href="#2-1-独立博客是一个自由空间" class="headerlink" title="2.1 独立博客是一个自由空间"></a>2.1 独立博客是一个自由空间</h3><p>相较于托管博客，独立博客有更多的自主权。自建博客和托管博客的关系，就好比是买房子与租房子的关系。选择租房子，你可以付出更少，入住更方便，可以在有限制的自由里装饰你租来的屋子。但是你所拥有的，是使用权而不是所有权。</p><p>而若自建博客，一年换两套装修风格没问题。只要你高兴，甚至在房里堆满大便都是你的自由。你说我特么没事干嘛在自家堆满大便。对，你没必要，但你有这个自由。知道自己享有这种自由，难道不是一件很爽的事么？</p><h3 id="2-2-自建独立博客很GEEK"><a href="#2-2-自建独立博客很GEEK" class="headerlink" title="2.2 自建独立博客很GEEK"></a>2.2 自建独立博客很GEEK</h3><p>如果你是程序猿，没个独立技术博客出门都不好意思跟人打招呼。事实上，虽然没有确切的数据，但是鉴于自建博客有一定的技术门槛，小白们想要自建独立博客需要耗费大量的时间成本，所以独立博客中应该多数是技术博客。</p><p>如果你是个技术小白，当别人问你最近忙啥时，你轻描淡写地说，最近对Web开发有点兴趣，自己搭了个独立博客玩。这个逼装的简直可以给10分，不怕你骄傲。旁人看来，你简直GEEK到不行，然而你真正要做的，只是找一篇合适且详细的教程，一步一步照着做。</p><h2 id="3-如何自建独立博客"><a href="#3-如何自建独立博客" class="headerlink" title="3 如何自建独立博客"></a>3 如何自建独立博客</h2><p>说了半天为啥要建，该说说怎么建了。当然，如果你有能力、有功夫自己从零开始配置服务器、搭建博客框架敬请忽视。以下部分仅供略懂以及不懂Web开发的人参考。</p><h3 id="3-1-独立博客搭建方法介绍"><a href="#3-1-独立博客搭建方法介绍" class="headerlink" title="3.1 独立博客搭建方法介绍"></a>3.1 独立博客搭建方法介绍</h3><p>搭建独立博客有很多方法，下面具体对比几种比较常见的、我在搭建个人博客时考虑过的方法。</p><table><thead><tr><th>方式</th><th>技术门槛</th><th>服务器购买</th><th>服务器配置</th><th>域名备案</th><th>访问速度</th><th>费用</th></tr></thead><tbody><tr><td>WordPress</td><td>中</td><td>需要</td><td>自行配置</td><td>可免</td><td>视服务器而定</td><td>视服务器而定</td></tr><tr><td>Jekyll</td><td>中</td><td>不用</td><td>GitHub Page</td><td>可免</td><td>较快</td><td>低</td></tr><tr><td>Hexo</td><td>中低</td><td>不用</td><td>GitHub Page</td><td>可免</td><td>较快</td><td>低</td></tr><tr><td>Ghost</td><td>低</td><td>不用</td><td>不用</td><td>可免</td><td>较快</td><td>高</td></tr><tr><td>Farbox</td><td>低</td><td>不用</td><td>不用</td><td>可免</td><td>快</td><td>中</td></tr></tbody></table><p>如果想要经历完整的建站流程，而又比较习惯图形界面的管理后台，可以选择<a href="https://cn.wordpress.org/" target="_blank" rel="noopener">WordPress</a>。WordPress现在仍然是全球范围内最流行的博客内容管理工具（CMS）。不过，由于要自行购买服务器空间和配置，有一定难度。</p><p><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a>和<a href="http://jekyllcn.com/" target="_blank" rel="noopener">Jekyll</a>都是静态博客框架，利用<a href="https://pages.github.com/" target="_blank" rel="noopener">GitHub Page</a>的免费空间，搭建起来要比WordPress省事不少，而且也是上述所有方案中最节约成本的。另外，两者都支持Markdown文本，作为博客平台，更加专注高效的内容管理也要胜于WordPress。</p><p><a href="https://ghost.org/" target="_blank" rel="noopener">Ghost</a>和<a href="https://www.farbox.com/" target="_blank" rel="noopener">Farbox</a>是上述方案中最为简单易用的，几乎没有技术门槛。不用考虑服务器端的种种，支持Markdown文本，通过云服务同步。但是，在提供省心服务的同时，也需要收取相应的服务费用。</p><h3 id="3-2-利用GitHub-Page搭建博客"><a href="#3-2-利用GitHub-Page搭建博客" class="headerlink" title="3.2 利用GitHub Page搭建博客"></a>3.2 利用GitHub Page搭建博客</h3><p>如果从上述几种方案中做选择，我个人更推荐利用<a href="https://pages.github.com/" target="_blank" rel="noopener">GitHub Page</a>和静态博客框架的方法。因为一来节约费用支出，二来域名免备案的同时、在全球范围的访问速度又都还不错，第三，利用GitHub Page进行服务器配置和文件上传也足够方便。</p><p>知乎是这样介绍GitHub Pages的：</p><blockquote><p>Github Pages允许用户的任何一个Repo的gh-pages分支上的代码可以经由HTTP访问到。类似提供了静态文件服务。你可以用Github Pages搭建博客，也可以把项目的文档和主页放在上面。</p></blockquote><p><a href="https://pages.github.com/" target="_blank" rel="noopener">GitHub Page</a>本身也支持你利用它的免费空间写博客，官方推荐<a href="http://jekyllcn.com/" target="_blank" rel="noopener">Jekyll</a>作为博客框架来写作。具体的设置教程可以参考阮一峰老师的这篇博文→<a href="http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html" target="_blank" rel="noopener">搭建一个免费的，无限流量的Blog—-github Pages和Jekyll入门</a>。</p><p>而上文提到的<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a>是湾湾同胞开发的静态博客框架，基于Node.js，相较于Jekyll，页面渲染生成更快，配置部署也更为简单。具体详尽的设置教程，Win可以参考这篇→<a href="https://zqily.com/2018/07/14/Windows%E4%B8%8B%E7%94%A8github+Hexo%EF%BC%88Next%E4%B8%BB%E9%A2%98%EF%BC%89%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2Blog/#more">Windows下用github+Hexo（Next主题）搭建博客Blog</a>，Mac可以更为方便，可以直接使用Mweb即可。</p><p>除了上述两种框架外，还有<a href="http://octopress.org/" target="_blank" rel="noopener">Octopress</a>等其他基于GitHub Page的博客框架。有兴趣的话可以横向对比探索。另外要善用GitHub Page的话，可能还需要掌握一些Git相关的知识，这点可以参考廖雪峰老师的→<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">Git教程</a>，或者<a href="https://www.udacity.com/" target="_blank" rel="noopener">Udacity</a>的线上课程→<a href="https://www.udacity.com/course/how-to-use-git-and-github--ud775" target="_blank" rel="noopener">How to use Git and GitHub</a>。</p><p>不过GitHub Page也并非完美无缺，至少在墙内使用的话，面临的一大问题是无法被百度收录。因为GitHub禁用了百度爬虫。据说是因为百度爬虫爬得太凶猛，已经对GitHub可用性造成了影响。好吧，又多了一个和百度说再见的理由。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;如果你有一个绝佳的长期写作idea，你会选在哪里发布？微信公众号？知乎？微博？Lofter?简书？Medium？博客？慢着，既然有前面那么多既简单好用，又具备巨大「网络效应」&lt;a href=&quot;https://en.wikipedia.org/wiki/Network_eff
      
    
    </summary>
    
      <category term="hexo" scheme="http://zqily.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://zqily.com/tags/hexo/"/>
    
      <category term="碎碎念" scheme="http://zqily.com/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>HexoEditor编写MarkDown自动上传替换七牛外链</title>
    <link href="http://zqily.com/2018/07/14/HexoEditor%E7%BC%96%E5%86%99MarkDown%E8%87%AA%E5%8A%A8%E4%B8%8A%E4%BC%A0%E6%9B%BF%E6%8D%A2%E4%B8%83%E7%89%9B%E5%A4%96%E9%93%BE/"/>
    <id>http://zqily.com/2018/07/14/HexoEditor编写MarkDown自动上传替换七牛外链/</id>
    <published>2018-07-13T16:18:45.000Z</published>
    <updated>2018-07-13T16:51:45.502Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>继之前介绍的如何搭建个人博客，如何完善博客各种功能，今天来介绍一下配合Hexo框架和Next主题来写文章的利器——HexoEditor。以及用七牛云保存图片，并用外链的方式在Hexo文章中显示图片。</p><hr><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><blockquote><p>os: Windows</p></blockquote><hr><h1 id="HexoEditor"><a href="#HexoEditor" class="headerlink" title="HexoEditor"></a>HexoEditor</h1><p>HexoEditor是一款配和Hexo框架和Next主题，写Markdown文章的编辑器。废话不多说，先上GitHub地址。</p><p><a href="https://github.com/zhuzhuyule/HexoEditor/blob/master/doc/cn/README.md" target="_blank" rel="noopener">GitHub</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装的话可以看<a href="http://zqily.com安装" target="_blank" rel="noopener">这里</a>，我有介绍过。</p><h2 id="打开"><a href="#打开" class="headerlink" title="打开"></a>打开</h2><p>在HexoEditor的根目录（根目录下有app,doc,icons等文件夹）下面，打开<code>Git Bash</code>，执行命令：</p><blockquote><p>npm start</p></blockquote><p>等一会儿就会出现HexoEditor编辑器。点击左下角会出现菜单栏。</p><p><img src="http://pai5cscef.bkt.clouddn.com/%E5%A6%82%E4%BD%95%E5%86%99%E5%A5%BDMarkdown%E6%96%87%E7%AB%A0%EF%BC%9FHexoEditor%E5%8A%A9%E4%BD%A0%E5%86%99%E5%87%BA%E4%B8%80%E7%AF%87%E5%A5%BDHexo%E6%96%87%E7%AB%A0/20180618052712819.png" alt=""></p><p>如果要写博文，就新建Post。</p><p>新建的文章会根据<code>/yoursite/scaffolds/post.md</code>模板自动生成一些内容，其实也就是这个文件的内容，如果想修改模板，就直接修改这个就行了。</p><h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><p>写文章的话，左边写，右边就会实时显示样式。没什么好讲的，所以重点讲一讲这个设置里面的图片设置（以七牛云为例）。</p><p>为什么要重点讲这个图片设置？<br>写文章的时候，图片有两种方式展现在页面上，一种是从本地读取，一种是从一个外链上读取。<br>本地读取的话，图片都保存在Coding上面，很占用空间，速度也不快。<br>所以一般选择将图片保存在七牛云或者别的地方，然后通过外链调用。</p><p><img src="http://pai5cscef.bkt.clouddn.com/%E5%A6%82%E4%BD%95%E5%86%99%E5%A5%BDMarkdown%E6%96%87%E7%AB%A0%EF%BC%9FHexoEditor%E5%8A%A9%E4%BD%A0%E5%86%99%E5%87%BA%E4%B8%80%E7%AF%87%E5%A5%BDHexo%E6%96%87%E7%AB%A0/20180618053310449.png" alt=""></p><ul><li>默认资源库：把你放在文章里面的图片存到这个目录下，可以在任意位置。</li><li>云图类型：七牛云、腾通自己选。</li><li>Access Key：从你七牛云或者百度云获取。</li><li>Secret Key：同上。</li><li>下面两个在填完上面两个Key之后会自动生成。</li></ul><h3 id="七牛云"><a href="#七牛云" class="headerlink" title="七牛云"></a>七牛云</h3><p>要使用七牛云，当然是先注册一个啦，<a href="https://portal.qiniu.com/signup?code=3l9qmvo8g6uz6" target="_blank" rel="noopener">点击进入注册页面</a>。实话实说，这是我的邀请链接，可以帮我增加每个月的下载流量。</p><p>注册好了之后，找到对象存储-&gt;立即添加。</p><p><img src="http://dugblog.coding.me/%E5%A6%82%E4%BD%95%E7%94%A8%E4%B8%83%E7%89%9B%E4%BA%91%E4%BF%9D%E5%AD%98Hexo%E6%96%87%E7%AB%A0%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87%EF%BC%8C%E5%B9%B6%E9%80%9A%E8%BF%87%E5%A4%96%E9%93%BE%E6%98%BE%E7%A4%BA%E5%9C%A8%E6%96%87%E7%AB%A0%E4%B8%AD/20180618054842730.png" alt=""></p><p>很好，会提示你实名验证，那就只有老老实实的实名验证啦~验证时间大概是两到三天，可以先收藏着我的文章，验证好了再来看~XD</p><p>验证好了之后，填好创建信息，确定创建。然后点击右上角个人面板，密钥管理</p><p><img src="http://pai5cscef.bkt.clouddn.com/%E5%A6%82%E4%BD%95%E5%86%99%E5%A5%BDMarkdown%E6%96%87%E7%AB%A0%EF%BC%9FHexoEditor%E5%8A%A9%E4%BD%A0%E5%86%99%E5%87%BA%E4%B8%80%E7%AF%87%E5%A5%BDHexo%E6%96%87%E7%AB%A0/20180618055558859.png" alt=""></p><p>可以看到两个Key的值</p><p><img src="http://pai5cscef.bkt.clouddn.com/%E5%A6%82%E4%BD%95%E5%86%99%E5%A5%BDMarkdown%E6%96%87%E7%AB%A0%EF%BC%9FHexoEditor%E5%8A%A9%E4%BD%A0%E5%86%99%E5%87%BA%E4%B8%80%E7%AF%87%E5%A5%BDHexo%E6%96%87%E7%AB%A0/20180618055634989.png" alt=""></p><p>这两个值就是刚刚HexoEditor的图片设置里面要填的。</p><h2 id="How-to-use"><a href="#How-to-use" class="headerlink" title="How to use?"></a>How to use?</h2><p>怎么用这个图床功能呢？</p><p>用HexoEditor写文章的时候，将你的图片直接复制，或者写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](图片绝对路径)</span><br></pre></td></tr></table></figure><p>然后右键，上传七牛云，接下来就是I have a HexoEditor, I have a qiniu, Bang! 你会发现</p><p><img src="http://pai5cscef.bkt.clouddn.com/%E5%A6%82%E4%BD%95%E5%86%99%E5%A5%BDMarkdown%E6%96%87%E7%AB%A0%EF%BC%9FHexoEditor%E5%8A%A9%E4%BD%A0%E5%86%99%E5%87%BA%E4%B8%80%E7%AF%87%E5%A5%BDHexo%E6%96%87%E7%AB%A0/20180618060123794.png" alt=""></p><p>这样的路径图片会变成一个外链图片</p><p><img src="http://pai5cscef.bkt.clouddn.com/%E5%A6%82%E4%BD%95%E5%86%99%E5%A5%BDMarkdown%E6%96%87%E7%AB%A0%EF%BC%9FHexoEditor%E5%8A%A9%E4%BD%A0%E5%86%99%E5%87%BA%E4%B8%80%E7%AF%87%E5%A5%BDHexo%E6%96%87%E7%AB%A0/20180620092749904.png" alt=""></p><p>打完收工！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;继之前介绍的如何搭建个人博客，如何完善博客各种功能，今天来介绍一下配合Hexo框架和Next主题来写文章的利器——HexoEditor。以及
      
    
    </summary>
    
      <category term="hexo" scheme="http://zqily.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://zqily.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Windows下用github+Hexo（Next主题）搭建博客Blog</title>
    <link href="http://zqily.com/2018/07/14/Windows%E4%B8%8B%E7%94%A8github+Hexo%EF%BC%88Next%E4%B8%BB%E9%A2%98%EF%BC%89%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2Blog/"/>
    <id>http://zqily.com/2018/07/14/Windows下用github+Hexo（Next主题）搭建博客Blog/</id>
    <published>2018-07-13T16:18:45.000Z</published>
    <updated>2018-07-13T16:32:47.540Z</updated>
    
    <content type="html"><![CDATA[<p>处女博文，就写一下这个个人Blog是如何搭建起来的吧。本文只讲解在Windows环境下如何搭建。</p><p>说起来想要搭建这样一个Blog还是因为我特别喜欢这个主题<strong><em>Next</em></strong>，所以索性就自己搭一个啦。</p><hr><h1 id="需要准备的东西"><a href="#需要准备的东西" class="headerlink" title="需要准备的东西"></a>需要准备的东西</h1><ul><li><a href="https://nodejs.org/en/" target="_blank" rel="noopener"><em>Node.js</em></a>（点击可进入下载页面，两个版本都行，我选的最新的版本）</li><li><a href="https://git-scm.com/download/win" target="_blank" rel="noopener"><em>Git</em></a>（点击进去直接下载，附赠一个<a href="https://blog.csdn.net/sishen47k/article/details/80211002" target="_blank" rel="noopener"><em>Git</em> 安装教程</a>）</li><li><a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener"><em>Hexo</em> 官方使用文档</a>（有什么更详细的想了解可以上官网，右上角可以选中文）</li><li><a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener"><em>Next</em> 主题官网</a>（官网上有很多详细的配置说明和设定教程）</li><li><a href="https://github.com/zhuzhuyule/HexoEditor/blob/master/doc/cn/README.md" target="_blank" rel="noopener"><em>HexoEditor</em></a>（用于编写<em>Markdown</em> 文章的软件，配合Hexo食用）</li><li><a href="https://notepad-plus-plus.org/" target="_blank" rel="noopener"><em>Notepad++</em></a>（Windows下记事本的替代品，因为记事本保存的时候会在每一行的开头还是结尾加一个什么标记，会导致有些文件用记事本打开之后再保存会出问题）</li><li><em>Git Bash</em> 相关的一点点小知识，和命令行使用方法一样。（这个我写在最后面，如果不会的话请看一看）</li></ul><p>如果以下步骤哪里出了问题，欢迎留言，留言时请填上邮箱，你就可以收到我的回复了。<br>PS：邮件回复可能会被收进垃圾箱，请注意。</p><hr><h1 id="开始搭建"><a href="#开始搭建" class="headerlink" title="开始搭建"></a>开始搭建</h1><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><p>所谓的依赖就是搭建博客需要的一些基层的软件，包括Node.js和Git，这两个东西在上面已经给出了下载链接，安装的话对于Windows用户应该不算难题吧。</p><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>安装好Git之后，任意空白处鼠标右键，会出现<code>Git Bash Here</code>。点击<code>Git Bash Here</code>会出现<code>Git Bash</code>对话框。</p><p>新建一个文件夹，用于保存Hexo生成的博客内容。（将这个文件夹成为Hexo文件夹）然后进入该文件夹，空白处右键，点击<code>Git Bash Here</code>，输入命令</p><p>| </p><p>npm install -g hexo-cli</p><p> |</p><p>如果没有报错，继续输入</p><p>| </p><p>hexo init </p><p> |</p><p>代表的是保存目录，如果不填会在当前目录下生成Hexo框架所需要的文件。</p><p>命令执行完成后，文件夹下的目录结构如下：</p><p>| </p><p>.<br>├── _config.yml<br>├── package.json<br>├── scaffolds<br>├── source<br>|   ├── _drafts<br>|   └── _posts<br>└── themes</p><p> |</p><p>其中<code>_config.yml</code>为配置文件，后面会用到。</p><p>验证一下是否安装成功。在刚刚的<code>Git Bash</code>对话框中输入命令</p><p>| </p><p>hexo g</p><p> |</p><p>等待完成后再输入命令</p><p>| </p><p>hexo s</p><p> |</p><p>然后打开浏览器，输入<code>localhost:4000</code>。如果成功看见博客就证明安装成功。</p><p>成功后在刚刚的<code>Git Bash</code>对话框中按下<code>Ctrl+c</code>停止服务。</p><h2 id="安装Next主题"><a href="#安装Next主题" class="headerlink" title="安装Next主题"></a>安装Next主题</h2><p>进入Hexo文件夹（上文提到过，这个目录下可以看到一个themes文件夹），在Hexo文件夹空白处右键打开<code>Git Bash Here</code>，输入命令</p><p>| </p><p>git clone <a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">https://github.com/theme-next/hexo-theme-next</a> themes/next</p><p> |</p><p>没有报错（红色的er），就证明已经安装好了Next主题。</p><h2 id="将Hexo的主题更改为Next主题"><a href="#将Hexo的主题更改为Next主题" class="headerlink" title="将Hexo的主题更改为Next主题"></a>将Hexo的主题更改为Next主题</h2><p>在Hexo文件夹下面可以看到一个<code>_config.yml</code>文件，右键用Notepad++打开（用记事本打开不知道会不会出问题，建议用Notepad++），靠下面的位置寻找</p><p>| </p><p>theme: landscape</p><p> |</p><p>将里面的landscape改成next</p><p>| </p><p>theme: next</p><p> |</p><p>然后和Hexo里面验证是否安装成功一样的步骤，可以检验主题是否更改成功。</p><p>在Hexo文件夹里面打开<code>Git Bash</code>对话框，输入命令</p><p>| </p><p>hexo clean -g</p><p> |</p><p>等待完成后再输入命令</p><p>| </p><p>hexo s</p><p> |</p><p>然后打开浏览器，输入<code>localhost:4000</code>。如果成功看到主题更改了，记得在刚刚的<code>Git Bash</code>对话框中按下<code>Ctrl+c</code>停止服务。</p><hr><h1 id="部署Hexo"><a href="#部署Hexo" class="headerlink" title="部署Hexo"></a>部署Hexo</h1><p>现在我们可以在本地显示自己博客了，可是创建博客就是给人看的呀，那接下来就把我们的博客部署到网上。在没有自己的服务器的情况下，大致的选择方案有两种：</p><ul><li>部署到GitHub上</li><li>部署到Coding上</li></ul><p>因为GitHub不让百度爬虫，影响百度收录，然后服务器在国外，速度也慢，所以推荐Coding。</p><p>首先当然是得拥有一个Coding账号啦~，<a href="https://coding.net/" target="_blank" rel="noopener">点击我注册</a>。</p><p>用户名一定不要有奇奇怪怪的符号！特别是下划线！影响收录！所以最好不要符号！</p><p>注册登录之后，右上角加号点击项目，新建一个项目</p><p><img src="http://pai5cscef.bkt.clouddn.com/%E7%94%A8Hexo%E6%A1%86%E6%9E%B6%E5%92%8CNext%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BABlog/20180618035501534.png" alt=""></p><p>项目名称一定要用<code>[你的用户名].coding.me</code>，比如用用户名为<code>dugblog</code>，项目名就填<code>dugblog.coding.me</code>。</p><p><img src="http://pai5cscef.bkt.clouddn.com/%E7%94%A8Hexo%E6%A1%86%E6%9E%B6%E5%92%8CNext%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BABlog/20180618035851832.png" alt=""></p><p>新建好了之后，会进入项目页面，点击左侧代码-&gt;Pages服务</p><p><img src="http://pai5cscef.bkt.clouddn.com/%E7%94%A8Hexo%E6%A1%86%E6%9E%B6%E5%92%8CNext%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BABlog/20180618040323625.png" alt=""></p><p>在部署来源里面选择<code>master分支</code>，保存</p><p><img src="http://pai5cscef.bkt.clouddn.com/%E7%94%A8Hexo%E6%A1%86%E6%9E%B6%E5%92%8CNext%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BABlog/20180618040413240.png" alt=""></p><p>保存好了之后，会出现这样的提示</p><p><img src="http://pai5cscef.bkt.clouddn.com/%E7%94%A8Hexo%E6%A1%86%E6%9E%B6%E5%92%8CNext%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BABlog/20180618041603426.png" alt=""></p><p>上图框出来的地址，就是你的博客地址，而且是一个一级目录，如果你的最后还有一个斜杠然后一串名称（例如：<code>http://DugBlog.coding.me/abcd</code>），请检查项目名称是否填对。</p><p>然后在左侧可以找到这个</p><p><img src="http://pai5cscef.bkt.clouddn.com/%E7%94%A8Hexo%E6%A1%86%E6%9E%B6%E5%92%8CNext%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BABlog/20180618040723739.png" alt=""></p><p>复制下来，打开站点配置文件，也就是<code>/yoursite/_config.yml</code>，和<code>source</code>平级目录下的那个。找到<code>deploy</code>，更改里面的配置：</p><p>| </p><p>deploy:<br> type: git # 必须填git<br> repo: # https://用户名:密码@刚刚复制的链接去掉https://</p><h1 id="repo示例-https-myblog-123456-git-coding-net-myblog-myblog-coding-me-git"><a href="#repo示例-https-myblog-123456-git-coding-net-myblog-myblog-coding-me-git" class="headerlink" title="repo示例 https://myblog:123456@git.coding.net/myblog/myblog.coding.me.git"></a>repo示例 <a href="https://myblog:123456@git.coding.net/myblog/myblog.coding.me.git" target="_blank" rel="noopener">https://myblog:123456@git.coding.net/myblog/myblog.coding.me.git</a></h1><p> branch: master # 刚刚选择的分支，不懂就填这个<br> message: blog update # 每次更新时提交的备注</p><p> |</p><p>填好保存好，在Hexo根目录下打开<code>Git Bash</code>，先后执行命令：</p><p>| </p><p>hexo clean<br>hexo g -d</p><p> |</p><p>再回到刚刚的Pages服务页面，点开自己的博客地址，就应该可以看到你的博客了。</p><hr><h1 id="HexoEditor安装"><a href="#HexoEditor安装" class="headerlink" title="HexoEditor安装"></a>HexoEditor安装</h1><p>首先找一个地方，新建一个文件夹用来放HexoEditor的文件。进入文件夹，右键打开<code>Git Bash</code>对话框，依次输入下面的命令：</p><p>| </p><p>npm config set registry “<a href="https://registry.npm.taobao.org/&quot;" target="_blank" rel="noopener">https://registry.npm.taobao.org/&quot;</a><br>npm config set electron_mirror “<a href="https://npm.taobao.org/mirrors/electron/&quot;" target="_blank" rel="noopener">https://npm.taobao.org/mirrors/electron/&quot;</a></p><p>git clone <a href="https://github.com/zhuzhuyule/HexoEditor.git" target="_blank" rel="noopener">https://github.com/zhuzhuyule/HexoEditor.git</a><br>cd HexoEditor<br>npm install</p><p> |</p><p>如果没报错，就是安装成功。而且会在你刚刚新建的目录下面生成一个HexoEditor目录。那么如何打开HexoEditor呢？</p><p>进入到HexoEditor的目录里面，右键打开<code>Git Bash</code>对话框，输入如下命令启动HexoEditor:</p><p>| </p><p>npm start</p><p> |</p><hr><h1 id="关于Git-Bash"><a href="#关于Git-Bash" class="headerlink" title="关于Git Bash"></a>关于Git Bash</h1><p>如果你来看这个，我默认你不怎么懂命令行，不打算深讲，只讲一点相关的内容。</p><p>在上述教程中，很多时候我会有一个操作，就是在某一个文件夹里面，空白处右键打开<code>Git Bash</code>。可能有的同学会有疑问，在不同的地方打开会有什么不同吗？<br><strong>是的！可以说完全不同！而且影响很严重。</strong></p><p>你仔细观察会发现，<code>$</code>这个符号上面一行最后面，有一个目录</p><p><img src="http://pai5cscef.bkt.clouddn.com/%E7%94%A8Hexo%E6%A1%86%E6%9E%B6%E5%92%8CNext%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BABlog/20180618034600251.png" alt=""></p><p>你在哪里打开的，这个目录就会是什么。而且你执行的所有命令，都会基于这个目录来执行。可以百度一下命令行和cd命令，会有更深的理解。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;处女博文，就写一下这个个人Blog是如何搭建起来的吧。本文只讲解在Windows环境下如何搭建。&lt;/p&gt;
&lt;p&gt;说起来想要搭建这样一个Blog还是因为我特别喜欢这个主题&lt;strong&gt;&lt;em&gt;Next&lt;/em&gt;&lt;/strong&gt;，所以索性就自己搭一个啦。&lt;/p&gt;
&lt;hr&gt;

      
    
    </summary>
    
      <category term="hexo" scheme="http://zqily.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://zqily.com/tags/hexo/"/>
    
      <category term="markdown" scheme="http://zqily.com/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>Markdown 语法说明 (简体中文版)</title>
    <link href="http://zqily.com/2018/07/14/Markdown%20%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E%20(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%E7%89%88)/"/>
    <id>http://zqily.com/2018/07/14/Markdown 语法说明 (简体中文版)/</id>
    <published>2018-07-13T16:18:45.000Z</published>
    <updated>2018-07-14T16:22:56.483Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Markdown-语法说明-简体中文版-点击查看快速入门"><a href="#Markdown-语法说明-简体中文版-点击查看快速入门" class="headerlink" title="Markdown 语法说明 (简体中文版) / (点击查看快速入门)"></a>Markdown 语法说明 (简体中文版) / (<a href="http://wowubuntu.com/markdown/basic.html" target="_blank" rel="noopener">点击查看快速入门</a>)</h1><ul><li><a href="http://wowubuntu.com/markdown/index.html#overview" target="_blank" rel="noopener">概述</a><ul><li><a href="http://wowubuntu.com/markdown/index.html#philosophy" target="_blank" rel="noopener">宗旨</a></li><li><a href="http://wowubuntu.com/markdown/index.html#html" target="_blank" rel="noopener">兼容 HTML</a></li><li><a href="http://wowubuntu.com/markdown/index.html#autoescape" target="_blank" rel="noopener">特殊字符自动转换</a></li></ul></li><li><a href="http://wowubuntu.com/markdown/index.html#block" target="_blank" rel="noopener">区块元素</a><ul><li><a href="http://wowubuntu.com/markdown/index.html#p" target="_blank" rel="noopener">段落和换行</a></li><li><a href="http://wowubuntu.com/markdown/index.html#header" target="_blank" rel="noopener">标题</a></li><li><a href="http://wowubuntu.com/markdown/index.html#blockquote" target="_blank" rel="noopener">区块引用</a></li><li><a href="http://wowubuntu.com/markdown/index.html#list" target="_blank" rel="noopener">列表</a></li><li><a href="http://wowubuntu.com/markdown/index.html#precode" target="_blank" rel="noopener">代码区块</a></li><li><a href="http://wowubuntu.com/markdown/index.html#hr" target="_blank" rel="noopener">分隔线</a></li></ul></li><li><a href="http://wowubuntu.com/markdown/index.html#span" target="_blank" rel="noopener">区段元素</a><ul><li><a href="http://wowubuntu.com/markdown/index.html#link" target="_blank" rel="noopener">链接</a></li><li><a href="http://wowubuntu.com/markdown/index.html#em" target="_blank" rel="noopener">强调</a></li><li><a href="http://wowubuntu.com/markdown/index.html#code" target="_blank" rel="noopener">代码</a></li><li><a href="http://wowubuntu.com/markdown/index.html#img" target="_blank" rel="noopener">图片</a></li></ul></li><li><a href="http://wowubuntu.com/markdown/index.html#misc" target="_blank" rel="noopener">其它</a><ul><li><a href="http://wowubuntu.com/markdown/index.html#backslash" target="_blank" rel="noopener">反斜杠</a></li><li><a href="http://wowubuntu.com/markdown/index.html#autolink" target="_blank" rel="noopener">自动链接</a></li></ul></li><li><a href="http://wowubuntu.com/markdown/index.html#acknowledgement" target="_blank" rel="noopener">感谢</a></li><li><a href="http://wowubuntu.com/markdown/index.html#editor" target="_blank" rel="noopener">Markdown 免费编辑器</a></li></ul><hr><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="宗旨"><a href="#宗旨" class="headerlink" title="宗旨"></a>宗旨</h3><p>Markdown 的目标是实现「易读易写」。</p><p>可读性，无论如何，都是最重要的。一份使用 Markdown 格式撰写的文件应该可以直接以纯文本发布，并且看起来不会像是由许多标签或是格式指令所构成。Markdown 语法受到一些既有 text-to-HTML 格式的影响，包括 <a href="http://docutils.sourceforge.net/mirror/setext.html" target="_blank" rel="noopener">Setext</a>、<a href="http://www.aaronsw.com/2002/atx/" target="_blank" rel="noopener">atx</a>、<a href="http://textism.com/tools/textile/" target="_blank" rel="noopener">Textile</a>、<a href="http://docutils.sourceforge.net/rst.html" target="_blank" rel="noopener">reStructuredText</a>、<a href="http://www.triptico.com/software/grutatxt.html" target="_blank" rel="noopener">Grutatext</a> 和 <a href="http://ettext.taint.org/doc/" target="_blank" rel="noopener">EtText</a>，而最大灵感来源其实是纯文本电子邮件的格式。</p><p>总之， Markdown 的语法全由一些符号所组成，这些符号经过精挑细选，其作用一目了然。比如：在文字两旁加上星号，看起来就像<em>强调</em>。Markdown 的列表看起来，嗯，就是列表。Markdown 的区块引用看起来就真的像是引用一段文字，就像你曾在电子邮件中见过的那样。</p><h3 id="兼容-HTML"><a href="#兼容-HTML" class="headerlink" title="兼容 HTML"></a>兼容 HTML</h3><p>Markdown 语法的目标是：成为一种适用于网络的_书写_语言。</p><p>Markdown 不是想要取代 HTML，甚至也没有要和它相近，它的语法种类很少，只对应 HTML 标记的一小部分。Markdown 的构想_不是<em>要使得 HTML 文档更容易书写。在我看来， HTML 已经很容易写了。Markdown 的理念是，能让文档更容易读、写和随意改。HTML 是一种</em>发布<em>的格式，Markdown 是一种</em>书写_的格式。就这样，Markdown 的格式语法只涵盖纯文本可以涵盖的范围。</p><p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。不需要额外标注这是 HTML 或是 Markdown；只要直接加标签就可以了。</p><p>要制约的只有一些 HTML 区块元素――比如 <code>、</code>、<code>、</code> 等标签，必须在前后加上空行与其它内容区隔开，还要求它们的开始标签与结尾标签不能用制表符或空格来缩进。Markdown 的生成器有足够智能，不会在 HTML 区块标签外加上不必要的 <code></code> 标签。</p><p>例子如下，在 Markdown 文件里加上一段 HTML 表格：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">这是一个普通段落。</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">        Foo</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">这是另一个普通段落。</span><br></pre></td></tr></table></figure><p>请注意，在 HTML 区块标签间的 Markdown 格式语法将不会被处理。比如，你在 HTML 区块内使用 Markdown 样式的<code>*强调*</code>会没有效果。</p><p>HTML 的区段（行内）标签如 <code>、</code>、<code>可以在 Markdown 的段落、列表或是标题里随意使用。依照个人习惯，甚至可以不用 Markdown 格式，而直接采用 HTML 标签来格式化。举例说明：如果比较喜欢 HTML 的</code> 或 <code></code> 标签，可以直接使用这些标签，而不用 Markdown 提供的链接或是图像标签语法。</p><p>和处在 HTML 区块标签间不同，Markdown 语法在 HTML 区段标签间是有效的。</p><h3 id="特殊字符自动转换"><a href="#特殊字符自动转换" class="headerlink" title="特殊字符自动转换"></a>特殊字符自动转换</h3><p>在 HTML 文件中，有两个字符需要特殊处理： <code>&lt;</code> 和 <code>&amp;</code> 。 <code>&lt;</code> 符号用于起始标签，<code>&amp;</code> 符号则用于标记 HTML 实体，如果你只是想要显示这些字符的原型，你必须要使用实体的形式，像是 <code>&lt;</code> 和 <code>&amp;</code>。</p><p><code>&amp;</code> 字符尤其让网络文档编写者受折磨，如果你要打「<code>AT&amp;T</code>」 ，你必须要写成「<code>AT&amp;T</code>」。而网址中的 <code>&amp;</code> 字符也要转换。比如你要链接到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://images.google.com/images?num=30&amp;q=larry+bird</span><br></pre></td></tr></table></figure><p>你必须要把网址转换写为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://images.google.com/images?num=30&amp;q=larry+bird</span><br></pre></td></tr></table></figure><p>才能放到链接标签的 <code>href</code> 属性里。不用说也知道这很容易忽略，这也可能是 HTML 标准检验所检查到的错误中，数量最多的。</p><p>Markdown 让你可以自然地书写字符，需要转换的由它来处理好了。如果你使用的 <code>&amp;</code> 字符是 HTML 字符实体的一部分，它会保留原状，否则它会被转换成 <code>&amp;</code>;。</p><p>所以你如果要在文档中插入一个版权符号 <code>©</code>，你可以这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">©</span><br></pre></td></tr></table></figure><p>Markdown 会保留它不动。而若你写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AT&amp;T</span><br></pre></td></tr></table></figure><p>Markdown 就会将它转为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AT&amp;T</span><br></pre></td></tr></table></figure><p>类似的状况也会发生在 <code>&lt;</code> 符号上，因为 Markdown 允许 <a href="http://wowubuntu.com/markdown/index.html#html" target="_blank" rel="noopener">兼容 HTML</a> ，如果你是把 <code>&lt;</code> 符号作为 HTML 标签的定界符使用，那 Markdown 也不会对它做任何转换，但是如果你写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4 &lt; 5</span><br></pre></td></tr></table></figure><p>Markdown 将会把它转换为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4 &lt; 5</span><br></pre></td></tr></table></figure><p>不过需要注意的是，code 范围内，不论是行内还是区块， <code>&lt;</code> 和 <code>&amp;</code> 两个符号都_一定_会被转换成 HTML 实体，这项特性让你可以很容易地用 Markdown 写 HTML code （和 HTML 相对而言， HTML 语法中，你要把所有的 <code>&lt;</code> 和 <code>&amp;</code> 都转换为 HTML 实体，才能在 HTML 文件里面写出 HTML code。）</p><hr><h2 id="区块元素"><a href="#区块元素" class="headerlink" title="区块元素"></a>区块元素</h2><h3 id="段落和换行"><a href="#段落和换行" class="headerlink" title="段落和换行"></a>段落和换行</h3><p>一个 Markdown 段落是由一个或多个连续的文本行组成，它的前后要有一个以上的空行（空行的定义是显示上看起来像是空的，便会被视为空行。比方说，若某一行只包含空格和制表符，则该行也会被视为空行）。普通段落不该用空格或制表符来缩进。</p><p>「由一个或多个连续的文本行组成」这句话其实暗示了 Markdown 允许段落内的强迫换行（插入换行符），这个特性和其他大部分的 text-to-HTML 格式不一样（包括 Movable Type 的「Convert Line Breaks」选项），其它的格式会把每个换行符都转成 <code></code> 标签。</p><p>如果你_确实_想要依赖 Markdown 来插入 <code></code> 标签的话，在插入处先按入两个以上的空格然后回车。</p><p>的确，需要多费点事（多加空格）来产生 <code>，但是简单地「每个换行都转换为</code>」的方法在 Markdown 中并不适合， Markdown 中 email 式的 <a href="http://wowubuntu.com/markdown/index.html#blockquote" target="_blank" rel="noopener">区块引用</a> 和多段落的 <a href="http://wowubuntu.com/markdown/index.html#list" target="_blank" rel="noopener">列表</a> 在使用换行来排版的时候，不但更好用，还更方便阅读。</p><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>Markdown 支持两种标题的语法，类 <a href="http://docutils.sourceforge.net/mirror/setext.html" target="_blank" rel="noopener">Setext</a> 和类 <a href="http://www.aaronsw.com/2002/atx/" target="_blank" rel="noopener">atx</a> 形式。</p><p>类 Setext 形式是用底线的形式，利用 <code>=</code> （最高阶标题）和 <code>-</code> （第二阶标题），例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">This is an H1</span><br><span class="line">=============</span><br><span class="line"></span><br><span class="line">This is an H2</span><br><span class="line">-------------</span><br></pre></td></tr></table></figure><p>任何数量的 <code>=</code> 和 <code>-</code> 都可以有效果。</p><p>类 Atx 形式则是在行首插入 1 到 6 个 <code>#</code> ，对应到标题 1 到 6 阶，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 这是 H1</span><br><span class="line"></span><br><span class="line">## 这是 H2</span><br><span class="line"></span><br><span class="line">###### 这是 H6</span><br></pre></td></tr></table></figure><p>你可以选择性地「闭合」类 atx 样式的标题，这纯粹只是美观用的，若是觉得这样看起来比较舒适，你就可以在行尾加上 <code>#</code>，而行尾的 <code>#</code> 数量也不用和开头一样（行首的井字符数量决定标题的阶数）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 这是 H1 #</span><br><span class="line"></span><br><span class="line">## 这是 H2 ##</span><br><span class="line"></span><br><span class="line">### 这是 H3 ######</span><br></pre></td></tr></table></figure><h3 id="区块引用-Blockquotes"><a href="#区块引用-Blockquotes" class="headerlink" title="区块引用 Blockquotes"></a>区块引用 Blockquotes</h3><p>Markdown 标记区块引用是使用类似 email 中用 <code>&gt;</code> 的引用方式。如果你还熟悉在 email 信件中的引言部分，你就知道怎么在 Markdown 文件中建立一个区块引用，那会看起来像是你自己先断好行，然后在每行的最前面加上 <code>&gt;</code> ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,</span><br><span class="line">&gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.</span><br><span class="line">&gt; Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</span><br><span class="line">&gt; </span><br><span class="line">&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse</span><br><span class="line">&gt; id sem consectetuer libero luctus adipiscing.</span><br></pre></td></tr></table></figure><p>Markdown 也允许你偷懒只在整个段落的第一行最前面加上 <code>&gt;</code> ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,</span><br><span class="line">consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.</span><br><span class="line">Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</span><br><span class="line"></span><br><span class="line">&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse</span><br><span class="line">id sem consectetuer libero luctus adipiscing.</span><br></pre></td></tr></table></figure><p>区块引用可以嵌套（例如：引用内的引用），只要根据层次加上不同数量的 <code>&gt;</code> ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; This is the first level of quoting.</span><br><span class="line">&gt;</span><br><span class="line">&gt; &gt; This is nested blockquote.</span><br><span class="line">&gt;</span><br><span class="line">&gt; Back to the first level.</span><br></pre></td></tr></table></figure><p>引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; ## 这是一个标题。</span><br><span class="line">&gt; </span><br><span class="line">&gt; 1\.   这是第一行列表项。</span><br><span class="line">&gt; 2\.   这是第二行列表项。</span><br><span class="line">&gt; </span><br><span class="line">&gt; 给出一些例子代码：</span><br><span class="line">&gt; </span><br><span class="line">&gt;     return shell_exec(&quot;echo $input | $markdown_script&quot;);</span><br></pre></td></tr></table></figure><p>任何像样的文本编辑器都能轻松地建立 email 型的引用。例如在 BBEdit 中，你可以选取文字后然后从选单中选择<em>增加引用阶层</em>。</p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>Markdown 支持有序列表和无序列表。</p><p>无序列表使用星号、加号或是减号作为列表标记：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*   Red</span><br><span class="line">*   Green</span><br><span class="line">*   Blue</span><br></pre></td></tr></table></figure><p>等同于：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">+   Red</span><br><span class="line">+   Green</span><br><span class="line">+   Blue</span><br></pre></td></tr></table></figure><p>也等同于：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-   Red</span><br><span class="line">-   Green</span><br><span class="line">-   Blue</span><br></pre></td></tr></table></figure><p>有序列表则使用数字接着一个英文句点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1\.  Bird</span><br><span class="line">2\.  McHale</span><br><span class="line">3\.  Parish</span><br></pre></td></tr></table></figure><p>很重要的一点是，你在列表标记上使用的数字并不会影响输出的 HTML 结果，上面的列表所产生的 HTML 标记为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Bird</span><br><span class="line">McHale</span><br><span class="line">Parish</span><br></pre></td></tr></table></figure><p>如果你的列表标记写成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1\.  Bird</span><br><span class="line">1\.  McHale</span><br><span class="line">1\.  Parish</span><br></pre></td></tr></table></figure><p>或甚至是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">3\. Bird</span><br><span class="line">1\. McHale</span><br><span class="line">8\. Parish</span><br></pre></td></tr></table></figure><p>你都会得到完全相同的 HTML 输出。重点在于，你可以让 Markdown 文件的列表数字和输出的结果相同，或是你懒一点，你可以完全不用在意数字的正确性。</p><p>如果你使用懒惰的写法，建议第一个项目最好还是从 1. 开始，因为 Markdown 未来可能会支持有序列表的 start 属性。</p><p>列表项目标记通常是放在最左边，但是其实也可以缩进，最多 3 个空格，项目标记后面则一定要接着至少一个空格或制表符。</p><p>要让列表看起来更漂亮，你可以把内容用固定的缩进整理好：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.</span><br><span class="line">    Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,</span><br><span class="line">    viverra nec, fringilla in, laoreet vitae, risus.</span><br><span class="line">*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.</span><br><span class="line">    Suspendisse id sem consectetuer libero luctus adipiscing.</span><br></pre></td></tr></table></figure><p>但是如果你懒，那也行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.</span><br><span class="line">Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,</span><br><span class="line">viverra nec, fringilla in, laoreet vitae, risus.</span><br><span class="line">*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.</span><br><span class="line">Suspendisse id sem consectetuer libero luctus adipiscing.</span><br></pre></td></tr></table></figure><p>如果列表项目间用空行分开，在输出 HTML 时 Markdown 就会将项目内容用 <code></code> 标签包起来，举例来说：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*   Bird</span><br><span class="line">*   Magic</span><br></pre></td></tr></table></figure><p>会被转换为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Bird</span><br><span class="line">Magic</span><br></pre></td></tr></table></figure><p>但是这个：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*   Bird</span><br><span class="line"></span><br><span class="line">*   Magic</span><br></pre></td></tr></table></figure><p>会被转换为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Bird</span><br><span class="line">Magic</span><br></pre></td></tr></table></figure><p>列表项目可以包含多个段落，每个项目下的段落都必须缩进 4 个空格或是 1 个制表符：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1\.  This is a list item with two paragraphs. Lorem ipsum dolor</span><br><span class="line">    sit amet, consectetuer adipiscing elit. Aliquam hendrerit</span><br><span class="line">    mi posuere lectus.</span><br><span class="line"></span><br><span class="line">    Vestibulum enim wisi, viverra nec, fringilla in, laoreet</span><br><span class="line">    vitae, risus. Donec sit amet nisl. Aliquam semper ipsum</span><br><span class="line">    sit amet velit.</span><br><span class="line"></span><br><span class="line">2\.  Suspendisse id sem consectetuer libero luctus adipiscing.</span><br></pre></td></tr></table></figure><p>如果你每行都有缩进，看起来会看好很多，当然，再次地，如果你很懒惰，Markdown 也允许：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">*   This is a list item with two paragraphs.</span><br><span class="line"></span><br><span class="line">    This is the second paragraph in the list item. You&apos;re</span><br><span class="line">only required to indent the first line. Lorem ipsum dolor</span><br><span class="line">sit amet, consectetuer adipiscing elit.</span><br><span class="line"></span><br><span class="line">*   Another item in the same list.</span><br></pre></td></tr></table></figure><p>如果要在列表项目内放进引用，那 <code>&gt;</code> 就需要缩进：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*   A list item with a blockquote:</span><br><span class="line"></span><br><span class="line">    &gt; This is a blockquote</span><br><span class="line">    &gt; inside a list item.</span><br></pre></td></tr></table></figure><p>如果要放代码区块的话，该区块就需要缩进_两次_，也就是 8 个空格或是 2 个制表符：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*   一列表项包含一个列表区块：</span><br><span class="line"></span><br><span class="line">        &lt;代码写在这&gt;</span><br></pre></td></tr></table></figure><p>当然，项目列表很可能会不小心产生，像是下面这样的写法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1986\. What a great season.</span><br></pre></td></tr></table></figure><p>换句话说，也就是在行首出现<em>数字-句点-空白</em>，要避免这样的状况，你可以在句点前面加上反斜杠。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1986\. What a great season.</span><br></pre></td></tr></table></figure><h3 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a>代码区块</h3><p>和程序相关的写作或是标签语言原始码通常会有已经排版好的代码区块，通常这些区块我们并不希望它以一般段落文件的方式去排版，而是照原来的样子显示，Markdown 会用 <code>和</code> 标签来把代码区块包起来。</p><p>要在 Markdown 中建立代码区块很简单，只要简单地缩进 4 个空格或是 1 个制表符就可以，例如，下面的输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这是一个普通段落：</span><br><span class="line"></span><br><span class="line">    这是一个代码区块。</span><br></pre></td></tr></table></figure><p>Markdown 会转换成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这是一个普通段落：</span><br><span class="line"></span><br><span class="line">这是一个代码区块。</span><br></pre></td></tr></table></figure><p>这个每行一阶的缩进（4 个空格或是 1 个制表符），都会被移除，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Here is an example of AppleScript:</span><br><span class="line"></span><br><span class="line">    tell application &quot;Foo&quot;</span><br><span class="line">        beep</span><br><span class="line">    end tell</span><br></pre></td></tr></table></figure><p>会被转换为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Here is an example of AppleScript:</span><br><span class="line"></span><br><span class="line">tell application &quot;Foo&quot;</span><br><span class="line">    beep</span><br><span class="line">end tell</span><br></pre></td></tr></table></figure><p>一个代码区块会一直持续到没有缩进的那一行（或是文件结尾）。</p><p>在代码区块里面， <code>&amp;</code> 、 <code>&lt;</code> 和 <code>&gt;</code> 会自动转成 HTML 实体，这样的方式让你非常容易使用 Markdown 插入范例用的 HTML 原始码，只需要复制贴上，再加上缩进就可以了，剩下的 Markdown 都会帮你处理，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">    </span><br><span class="line">© 2004 Foo Corporation</span><br></pre></td></tr></table></figure><p>会被转换为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;footer&quot;&gt;</span><br><span class="line">    &amp;copy; 2004 Foo Corporation</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>代码区块中，一般的 Markdown 语法不会被转换，像是星号便只是星号，这表示你可以很容易地以 Markdown 语法撰写 Markdown 语法相关的文件。</p><h3 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h3><p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">* * *</span><br><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">*****</span><br><span class="line"></span><br><span class="line">- - -</span><br><span class="line"></span><br><span class="line">---------------------------------------</span><br></pre></td></tr></table></figure><hr><h2 id="区段元素"><a href="#区段元素" class="headerlink" title="区段元素"></a>区段元素</h2><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>Markdown 支持两种形式的链接语法： <em>行内式</em>和<em>参考式</em>两种形式。</p><p>不管是哪一种，链接文字都是用 [方括号] 来标记。</p><p>要建立一个<em>行内式</em>的链接，只要在方块括号后面紧接着圆括号并插入网址链接即可，如果你还想要加上链接的 title 文字，只要在网址后面，用双引号把 title 文字包起来即可，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">This is [an example](http://example.com/ &quot;Title&quot;) inline link.</span><br><span class="line"></span><br><span class="line">[This link](http://example.net/) has no title attribute.</span><br></pre></td></tr></table></figure><p>会产生：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">This is </span><br><span class="line">an example inline link.</span><br><span class="line"></span><br><span class="line">This link has no</span><br><span class="line">title attribute.</span><br></pre></td></tr></table></figure><p>如果你是要链接到同样主机的资源，你可以使用相对路径：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">See my [About](/about/) page for details.</span><br></pre></td></tr></table></figure><p><em>参考式</em>的链接是在链接文字的括号后面再接上另一个方括号，而在第二个方括号里面要填入用以辨识链接的标记：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This is [an example][id] reference-style link.</span><br></pre></td></tr></table></figure><p>你也可以选择性地在两个方括号中间加上一个空格：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This is [an example] [id] reference-style link.</span><br></pre></td></tr></table></figure><p>接着，在文件的任意处，你可以把这个标记的链接内容定义出来：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[id]: http://example.com/  &quot;Optional Title Here&quot;</span><br></pre></td></tr></table></figure><p>链接内容定义的形式为：</p><ul><li>方括号（前面可以选择性地加上至多三个空格来缩进），里面输入链接文字</li><li>接着一个冒号</li><li>接着一个以上的空格或制表符</li><li>接着链接的网址</li><li>选择性地接着 title 内容，可以用单引号、双引号或是括弧包着</li></ul><p>下面这三种链接的定义都是相同：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[foo]: http://example.com/  &quot;Optional Title Here&quot;</span><br><span class="line">[foo]: http://example.com/  &apos;Optional Title Here&apos;</span><br><span class="line">[foo]: http://example.com/  (Optional Title Here)</span><br></pre></td></tr></table></figure><p><strong>请注意：</strong>有一个已知的问题是 Markdown.pl 1.0.1 会忽略单引号包起来的链接 title。</p><p>链接网址也可以用尖括号包起来：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[id]:   &quot;Optional Title Here&quot;</span><br></pre></td></tr></table></figure><p>你也可以把 title 属性放到下一行，也可以加一些缩进，若网址太长的话，这样会比较好看：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[id]: http://example.com/longish/path/to/resource/here</span><br><span class="line">    &quot;Optional Title Here&quot;</span><br></pre></td></tr></table></figure><p>网址定义只有在产生链接的时候用到，并不会直接出现在文件之中。</p><p>链接辨别标签可以有字母、数字、空白和标点符号，但是并_不_区分大小写，因此下面两个链接是一样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[link text][a]</span><br><span class="line">[link text][A]</span><br></pre></td></tr></table></figure><p><em>隐式链接标记</em>功能让你可以省略指定链接标记，这种情形下，链接标记会视为等同于链接文字，要用隐式链接标记只要在链接文字后面加上一个空的方括号，如果你要让 “Google” 链接到 google.com，你可以简化成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Google][]</span><br></pre></td></tr></table></figure><p>然后定义链接内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Google]: http://google.com/</span><br></pre></td></tr></table></figure><p>由于链接文字可能包含空白，所以这种简化型的标记内也许包含多个单词：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Visit [Daring Fireball][] for more information.</span><br></pre></td></tr></table></figure><p>然后接着定义链接：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Daring Fireball]: http://daringfireball.net/</span><br></pre></td></tr></table></figure><p>链接的定义可以放在文件中的任何一个地方，我比较偏好直接放在链接出现段落的后面，你也可以把它放在文件最后面，就像是注解一样。</p><p>下面是一个参考式链接的范例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">I get 10 times more traffic from [Google] [1] than from</span><br><span class="line">[Yahoo] [2] or [MSN] [3].</span><br><span class="line"></span><br><span class="line">  [1]: http://google.com/        &quot;Google&quot;</span><br><span class="line">  [2]: http://search.yahoo.com/  &quot;Yahoo Search&quot;</span><br><span class="line">  [3]: http://search.msn.com/    &quot;MSN Search&quot;</span><br></pre></td></tr></table></figure><p>如果改成用链接名称的方式写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">I get 10 times more traffic from [Google][] than from</span><br><span class="line">[Yahoo][] or [MSN][].</span><br><span class="line"></span><br><span class="line">  [google]: http://google.com/        &quot;Google&quot;</span><br><span class="line">  [yahoo]:  http://search.yahoo.com/  &quot;Yahoo Search&quot;</span><br><span class="line">  [msn]:    http://search.msn.com/    &quot;MSN Search&quot;</span><br></pre></td></tr></table></figure><p>上面两种写法都会产生下面的 HTML。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">I get 10 times more traffic from Google than from</span><br><span class="line">Yahoo</span><br><span class="line">or MSN.</span><br></pre></td></tr></table></figure><p>下面是用行内式写的同样一段内容的 Markdown 文件，提供作为比较之用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">I get 10 times more traffic from [Google](http://google.com/ &quot;Google&quot;)</span><br><span class="line">than from [Yahoo](http://search.yahoo.com/ &quot;Yahoo Search&quot;) or</span><br><span class="line">[MSN](http://search.msn.com/ &quot;MSN Search&quot;).</span><br></pre></td></tr></table></figure><p>参考式的链接其实重点不在于它比较好写，而是它比较好读，比较一下上面的范例，使用参考式的文章本身只有 81 个字符，但是用行内形式的却会增加到 176 个字元，如果是用纯 HTML 格式来写，会有 234 个字元，在 HTML 格式中，标签比文本还要多。</p><p>使用 Markdown 的参考式链接，可以让文件更像是浏览器最后产生的结果，让你可以把一些标记相关的元数据移到段落文字之外，你就可以增加链接而不让文章的阅读感觉被打断。</p><h3 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h3><p>Markdown 使用星号（<code>*</code>）和底线（<code>_</code>）作为标记强调字词的符号，被 <code>*</code> 或 <code>_</code> 包围的字词会被转成用 <code>标签包围，用两个 `*` 或 `_` 包起来的话，则会被转成</code>，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">*single asterisks*</span><br><span class="line"></span><br><span class="line">_single underscores_</span><br><span class="line"></span><br><span class="line">**double asterisks**</span><br><span class="line"></span><br><span class="line">__double underscores__</span><br></pre></td></tr></table></figure><p>会转成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">single asterisks</span><br><span class="line"></span><br><span class="line">single underscores</span><br><span class="line"></span><br><span class="line">double asterisks</span><br><span class="line"></span><br><span class="line">double underscores</span><br></pre></td></tr></table></figure><p>你可以随便用你喜欢的样式，唯一的限制是，你用什么符号开启标签，就要用什么符号结束。</p><p>强调也可以直接插在文字中间：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">un*frigging*believable</span><br></pre></td></tr></table></figure><p>但是<strong>如果你的 <code>*</code> 和 <code>_</code> 两边都有空白的话，它们就只会被当成普通的符号</strong>。</p><p>如果要在文字前后直接插入普通的星号或底线，你可以用反斜线：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\*this text is surrounded by literal asterisks\*</span><br></pre></td></tr></table></figure><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>如果要标记一小段行内代码，你可以用反引号把它包起来（<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>Use the <code>printf()</code> function.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">会产生：</span><br></pre></td></tr></table></figure><p>Use the printf() function.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">如果要在代码区段内插入反引号，你可以用多个反引号来开启和结束代码区段：</span><br></pre></td></tr></table></figure><p><code>There is a literal backtick (`) here.</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">这段语法会产生：</span><br></pre></td></tr></table></figure><p>There is a literal backtick (`) here.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">代码区段的起始和结束端都可以放入一个空白，起始端后面一个，结束端前面一个，这样你就可以在区段的一开始就插入反引号：</span><br></pre></td></tr></table></figure><p>A single backtick in a code span: <code>`</code></p><p>A backtick-delimited string in a code span: <code>`foo`</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">会产生：</span><br></pre></td></tr></table></figure><p>A single backtick in a code span: `</p><p>A backtick-delimited string in a code span: <code>foo</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">在代码区段内，`&amp;` 和尖括号**都**会被自动地转成 HTML 实体，这使得插入 HTML 原始码变得很容易，Markdown 会把下面这段：</span><br></pre></td></tr></table></figure><p>Please don’t use any <code></code> tags.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">转为：</span><br></pre></td></tr></table></figure><p>Please don’t use any <blink> tags.</blink></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">你也可以这样写：</span><br></pre></td></tr></table></figure><p><code>—</code> is the decimal-encoded equivalent of <code>—</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">以产生：</span><br></pre></td></tr></table></figure><p>&#8212; is the decimal-encoded<br>equivalent of &mdash;.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 图片</span><br><span class="line"></span><br><span class="line">很明显地，要在纯文字应用中设计一个「自然」的语法来插入图片是有一定难度的。</span><br><span class="line"></span><br><span class="line">Markdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： _行内式_和_参考式_。</span><br><span class="line"></span><br><span class="line">行内式的图片语法看起来像是：</span><br></pre></td></tr></table></figure><p><img src="/path/to/img.jpg" alt="Alt text"></p><p><img src="/path/to/img.jpg" alt="Alt text" title="Optional title"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">详细叙述如下：</span><br><span class="line"></span><br><span class="line">*   一个惊叹号 `!`</span><br><span class="line">*   接着一个方括号，里面放上图片的替代文字</span><br><span class="line">*   接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上 选择性的 &apos;title&apos; 文字。</span><br><span class="line"></span><br><span class="line">参考式的图片语法则长得像这样：</span><br></pre></td></tr></table></figure><p><img src="url/to/image" alt="Alt text" title="Optional title attribute"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">「id」是图片参考的名称，图片参考的定义方式则和连结参考一样：</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">到目前为止， Markdown 还没有办法指定图片的宽高，如果你需要的话，你可以使用普通的 `` 标签。</span><br><span class="line"></span><br><span class="line">* * *</span><br><span class="line"></span><br><span class="line">## 其它</span><br><span class="line"></span><br><span class="line">### 自动链接</span><br><span class="line"></span><br><span class="line">Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用尖括号包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如：</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Markdown 会转为：</span><br></pre></td></tr></table></figure><p><a href="http://example.com/" target="_blank" rel="noopener">http://example.com/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">邮址的自动链接也很类似，只是 Markdown 会先做一个编码转换的过程，把文字字符转成 16 进位码的 HTML 实体，这样的格式可以糊弄一些不好的邮址收集机器人，例如：</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Markdown 会转成：</span><br></pre></td></tr></table></figure><p>address@exa<br>mple.com</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">在浏览器里面，这段字串（其实是 `address@example.com`）会变成一个可以点击的「address@example.com」链接。</span><br><span class="line"></span><br><span class="line">（这种作法虽然可以糊弄不少的机器人，但并不能全部挡下来，不过总比什么都不做好些。不管怎样，公开你的信箱终究会引来广告信件的。）</span><br><span class="line"></span><br><span class="line">### 反斜杠</span><br><span class="line"></span><br><span class="line">Markdown 可以利用反斜杠来插入一些在语法中有其它意义的符号，例如：如果你想要用星号加在文字旁边的方式来做出强调效果（但不用 `` 标签），你可以在星号的前面加上反斜杠：</span><br></pre></td></tr></table></figure><p>*literal asterisks*</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</span><br></pre></td></tr></table></figure><p>\   反斜线<br>`   反引号</p><ul><li>星号<br>_   底线<br>{}  花括号<br>[]  方括号<br>()  括弧<h1 id="井字号"><a href="#井字号" class="headerlink" title="井字号"></a>井字号</h1></li></ul><ul><li>加号</li></ul><ul><li>减号<br>.   英文句点<br>!   惊叹号</li></ul><p><code>`</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Markdown-语法说明-简体中文版-点击查看快速入门&quot;&gt;&lt;a href=&quot;#Markdown-语法说明-简体中文版-点击查看快速入门&quot; class=&quot;headerlink&quot; title=&quot;Markdown 语法说明 (简体中文版) / (点击查看快速入门)&quot;&gt;
      
    
    </summary>
    
      <category term="hexo" scheme="http://zqily.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://zqily.com/tags/hexo/"/>
    
      <category term="markdown" scheme="http://zqily.com/tags/markdown/"/>
    
  </entry>
  
</feed>
