{"meta":{"title":"冰清璧润-唐泽清的博客","subtitle":"唐泽清的博客","description":"最初的梦想一定会到达！","author":"唐泽清","url":"https://www.zqily.com"},"pages":[{"title":"board","date":"2016-07-07T13:43:11.000Z","updated":"2018-07-13T05:07:29.268Z","comments":true,"path":"board/index.html","permalink":"https://www.zqily.com/board/index.html","excerpt":"","text":"#欢迎朋友们前来留言！"},{"title":"categories","date":"2018-07-13T01:22:33.000Z","updated":"2018-07-13T01:23:44.104Z","comments":true,"path":"categories/index.html","permalink":"https://www.zqily.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-07-13T01:22:18.000Z","updated":"2018-07-13T01:24:21.131Z","comments":true,"path":"tags/index.html","permalink":"https://www.zqily.com/tags/index.html","excerpt":"","text":""},{"title":"","date":"2018-07-26T11:40:45.772Z","updated":"2011-12-29T19:39:44.000Z","comments":true,"path":"countdown/assets/countdown/jquery.countdown.css","permalink":"https://www.zqily.com/countdown/assets/countdown/jquery.countdown.css","excerpt":"","text":".countdownHolder{ width:450px; margin:0 auto; font: 40px/1.5 'Open Sans Condensed',sans-serif; text-align:center; letter-spacing:-3px; } .position{ display: inline-block; height: 1.6em; overflow: hidden; position: relative; width: 1.05em; } .digit{ position:absolute; display:block; width:1em; background-color:#444; border-radius:0.2em; text-align:center; color:#fff; letter-spacing:-1px; } .digit.static{ box-shadow:1px 1px 1px rgba(4, 4, 4, 0.35); background-image: linear-gradient(bottom, #3A3A3A 50%, #444444 50%); background-image: -o-linear-gradient(bottom, #3A3A3A 50%, #444444 50%); background-image: -moz-linear-gradient(bottom, #3A3A3A 50%, #444444 50%); background-image: -webkit-linear-gradient(bottom, #3A3A3A 50%, #444444 50%); background-image: -ms-linear-gradient(bottom, #3A3A3A 50%, #444444 50%); background-image: -webkit-gradient( linear, left bottom, left top, color-stop(0.5, #3A3A3A), color-stop(0.5, #444444) ); } /** * You can use these classes to hide parts * of the countdown that you don't need. */ .countDays{ /* display:none !important;*/ } .countDiv0{ /* display:none !important;*/ } .countHours{} .countDiv1{} .countMinutes{} .countDiv2{} .countSeconds{} .countDiv{ display:inline-block; width:16px; height:1.6em; position:relative; } .countDiv:before, .countDiv:after{ position:absolute; width:5px; height:5px; background-color:#444; border-radius:50%; left:50%; margin-left:-3px; top:0.5em; box-shadow:1px 1px 1px rgba(4, 4, 4, 0.5); content:''; } .countDiv:after{ top:0.9em; }"},{"title":"","date":"2018-07-26T11:40:45.803Z","updated":"2011-12-29T19:48:15.000Z","comments":true,"path":"countdown/assets/countdown/jquery.countdown.js","permalink":"https://www.zqily.com/countdown/assets/countdown/jquery.countdown.js","excerpt":"","text":"/** * @name jQuery Countdown Plugin * @author Martin Angelov * @version 1.0 * @url http://tutorialzine.com/2011/12/countdown-jquery/ * @license MIT License */ (function($){ // Number of seconds in every time division var days = 24*60*60, hours = 60*60, minutes = 60; // Creating the plugin $.fn.countdown = function(prop){ var options = $.extend({ callback : function(){}, timestamp : 0 },prop); var left, d, h, m, s, positions; // Initialize the plugin init(this, options); positions = this.find('.position'); (function tick(){ // Time left left = Math.floor((options.timestamp - (new Date())) / 1000); if(left < 0){ left = 0; } // Number of days left d = Math.floor(left / days); updateDuo(0, 1, d); left -= d*days; // Number of hours left h = Math.floor(left / hours); updateDuo(2, 3, h); left -= h*hours; // Number of minutes left m = Math.floor(left / minutes); updateDuo(4, 5, m); left -= m*minutes; // Number of seconds left s = left; updateDuo(6, 7, s); // Calling an optional user supplied callback options.callback(d, h, m, s); // Scheduling another call of this function in 1s setTimeout(tick, 1000); })(); // This function updates two digit positions at once function updateDuo(minor,major,value){ switchDigit(positions.eq(minor),Math.floor(value/10)%10); switchDigit(positions.eq(major),value%10); } return this; }; function init(elem, options){ elem.addClass('countdownHolder'); // Creating the markup inside the container $.each(['Days','Hours','Minutes','Seconds'],function(i){ $('').html( '\\ 0\\ \\ \\ 0\\ ' ).appendTo(elem); if(this!=\"Seconds\"){ elem.append(''); } }); } // Creates an animated transition between the two numbers function switchDigit(position,number){ var digit = position.find('.digit') if(digit.is(':animated')){ return false; } if(position.data('digit') == number){ // We are already showing this number return false; } position.data('digit', number); var replacement = $('',{ 'class':'digit', css:{ top:'-2.1em', opacity:0 }, html:number }); // The .static class is added when the animation // completes. This makes it run smoother. digit .before(replacement) .removeClass('static') .animate({top:'2.5em',opacity:0},'fast',function(){ digit.remove(); }) replacement .delay(100) .animate({top:0,opacity:1},'fast',function(){ replacement.addClass('static'); }); } })(jQuery);"},{"title":"","date":"2018-07-26T11:40:45.803Z","updated":"2011-12-29T17:39:57.000Z","comments":true,"path":"countdown/assets/css/styles.css","permalink":"https://www.zqily.com/countdown/assets/css/styles.css","excerpt":"","text":"/*------------------------- Simple reset --------------------------*/ *{ margin:0; padding:0; } /*------------------------- General Styles --------------------------*/ html{ background:url('../img/tile_bg.jpg') #b0b0b0; position:relative; } body{ background:url('../img/page_bg_center.jpg') no-repeat center center; min-height: 600px; padding: 200px 0 0; font:14px/1.3 'Segoe UI',Arial, sans-serif; } a, a:visited { text-decoration:none; outline:none; color:#54a6de; } a:hover{ text-decoration:underline; } section, footer{ display: block; } /*---------------------------- Main Section -----------------------------*/ #note{ color: #666666; font-size: 12px; margin: 0 auto; padding: 4px; text-align: center; text-shadow: 1px 1px 0 rgba(255, 255, 255, 0.3); width: 400px; } /*---------------------------- The Footer -----------------------------*/ footer{ background-color: #111111; bottom: 0; box-shadow: 0 -1px 2px #111111; height: 45px; left: 0; position: fixed; width: 100%; z-index: 100000; } footer h2{ color: #EEEEEE; font-size: 14px; font-weight: normal; left: 50%; margin-left: -400px; padding: 13px 0 0; position: absolute; width: 540px; } footer h2 i{ font-style:normal; color:#888; } footer a.tzine,a.tzine:visited{ color: #999999; font-size: 12px; left: 50%; margin: 16px 0 0 110px; position: absolute; text-decoration: none; top: 0; } footer a i{ color:#ccc; font-style: normal; } footer a i b{ color:#c92020; font-weight: normal; }"},{"title":"","date":"2018-07-26T12:03:44.010Z","updated":"2018-07-26T12:03:44.010Z","comments":true,"path":"countdown/assets/js/script.js","permalink":"https://www.zqily.com/countdown/assets/js/script.js","excerpt":"","text":"$(function(){ var note = $('#note'), ts = new Date(2018, 11, 22), newYear = true; if((new Date()) > ts){ // The new year is here! Count towards something else. // Notice the *1000 at the end - time must be in milliseconds ts = (new Date()).getTime() + 10*24*60*60*1000; newYear = false; } $('#countdown').countdown({ timestamp : ts, callback : function(days, hours, minutes, seconds){ var message = \"\"; message += days + \" day\" + ( days==1 ? '':'s' ) + \", \"; message += hours + \" hour\" + ( hours==1 ? '':'s' ) + \", \"; message += minutes + \" minute\" + ( minutes==1 ? '':'s' ) + \" and \"; message += seconds + \" second\" + ( seconds==1 ? '':'s' ) + \" \"; if(newYear){ message += \"left until the Graduate entrance examination!\"; } else { message += \"left to 10 days from now!\"; } note.html(message); } }); });"},{"title":"","date":"2018-07-26T11:57:59.260Z","updated":"2018-07-26T11:44:24.434Z","comments":true,"path":"countdown/assets/countdown/jquery-1.7.1.min.js","permalink":"https://www.zqily.com/countdown/assets/countdown/jquery-1.7.1.min.js","excerpt":"","text":"/*! jQuery v1.7.1 jquery.com | jquery.org/license */ (function(a,b){function cy(a){return f.isWindow(a)?a:a.nodeType===9?a.defaultView||a.parentWindow:!1}function cv(a){if(!ck[a]){var b=c.body,d=f(\"\").appendTo(b),e=d.css(\"display\");d.remove();if(e===\"none\"||e===\"\"){cl||(cl=c.createElement(\"iframe\"),cl.frameBorder=cl.width=cl.height=0),b.appendChild(cl);if(!cm||!cl.createElement)cm=(cl.contentWindow||cl.contentDocument).document,cm.write((c.compatMode===\"CSS1Compat\"?\"\":\"\")+\"\"),cm.close();d=cm.createElement(a),cm.body.appendChild(d),e=f.css(d,\"display\"),b.removeChild(cl)}ck[a]=e}return ck[a]}function cu(a,b){var c={};f.each(cq.concat.apply([],cq.slice(0,b)),function(){c[this]=a});return c}function ct(){cr=b}function cs(){setTimeout(ct,0);return cr=f.now()}function cj(){try{return new a.ActiveXObject(\"Microsoft.XMLHTTP\")}catch(b){}}function ci(){try{return new a.XMLHttpRequest}catch(b){}}function cc(a,c){a.dataFilter&&(c=a.dataFilter(c,a.dataType));var d=a.dataTypes,e={},g,h,i=d.length,j,k=d[0],l,m,n,o,p;for(g=1;g0){if(c!==\"border\")for(;g=0===c})}function S(a){return!a||!a.parentNode||a.parentNode.nodeType===11}function K(){return!0}function J(){return!1}function n(a,b,c){var d=b+\"defer\",e=b+\"queue\",g=b+\"mark\",h=f._data(a,d);h&&(c===\"queue\"||!f._data(a,e))&&(c===\"mark\"||!f._data(a,g))&&setTimeout(function(){!f._data(a,e)&&!f._data(a,g)&&(f.removeData(a,d,!0),h.fire())},0)}function m(a){for(var b in a){if(b===\"data\"&&f.isEmptyObject(a[b]))continue;if(b!==\"toJSON\")return!1}return!0}function l(a,c,d){if(d===b&&a.nodeType===1){var e=\"data-\"+c.replace(k,\"-$1\").toLowerCase();d=a.getAttribute(e);if(typeof d==\"string\"){try{d=d===\"true\"?!0:d===\"false\"?!1:d===\"null\"?null:f.isNumeric(d)?parseFloat(d):j.test(d)?f.parseJSON(d):d}catch(g){}f.data(a,c,d)}else d=b}return d}function h(a){var b=g[a]={},c,d;a=a.split(/\\s+/);for(c=0,d=a.length;c)[^>]*$|#([\\w\\-]*)$)/,j=/\\S/,k=/^\\s+/,l=/\\s+$/,m=/^(?:)?$/,n=/^[\\],:{}\\s]*$/,o=/\\\\(?:[\"\\\\\\/bfnrt]|u[0-9a-fA-F]{4})/g,p=/\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g,q=/(?:^|:|,)(?:\\s*\\[)+/g,r=/(webkit)[ \\/]([\\w.]+)/,s=/(opera)(?:.*version)?[ \\/]([\\w.]+)/,t=/(msie) ([\\w.]+)/,u=/(mozilla)(?:.*? rv:([\\w.]+))?/,v=/-([a-z]|[0-9])/ig,w=/^-ms-/,x=function(a,b){return(b+\"\").toUpperCase()},y=d.userAgent,z,A,B,C=Object.prototype.toString,D=Object.prototype.hasOwnProperty,E=Array.prototype.push,F=Array.prototype.slice,G=String.prototype.trim,H=Array.prototype.indexOf,I={};e.fn=e.prototype={constructor:e,init:function(a,d,f){var g,h,j,k;if(!a)return this;if(a.nodeType){this.context=this[0]=a,this.length=1;return this}if(a===\"body\"&&!d&&c.body){this.context=c,this[0]=c.body,this.selector=a,this.length=1;return this}if(typeof a==\"string\"){a.charAt(0)!==\"\"||a.length0)return;A.fireWith(c,[e]),e.fn.trigger&&e(c).trigger(\"ready\").off(\"ready\")}},bindReady:function(){if(!A){A=e.Callbacks(\"once memory\");if(c.readyState===\"complete\")return setTimeout(e.ready,1);if(c.addEventListener)c.addEventListener(\"DOMContentLoaded\",B,!1),a.addEventListener(\"load\",e.ready,!1);else if(c.attachEvent){c.attachEvent(\"onreadystatechange\",B),a.attachEvent(\"onload\",e.ready);var b=!1;try{b=a.frameElement==null}catch(d){}c.documentElement.doScroll&&b&&J()}}},isFunction:function(a){return e.type(a)===\"function\"},isArray:Array.isArray||function(a){return e.type(a)===\"array\"},isWindow:function(a){return a&&typeof a==\"object\"&&\"setInterval\"in a},isNumeric:function(a){return!isNaN(parseFloat(a))&&isFinite(a)},type:function(a){return a==null?String(a):I[C.call(a)]||\"object\"},isPlainObject:function(a){if(!a||e.type(a)!==\"object\"||a.nodeType||e.isWindow(a))return!1;try{if(a.constructor&&!D.call(a,\"constructor\")&&!D.call(a.constructor.prototype,\"isPrototypeOf\"))return!1}catch(c){return!1}var d;for(d in a);return d===b||D.call(a,d)},isEmptyObject:function(a){for(var b in a)return!1;return!0},error:function(a){throw new Error(a)},parseJSON:function(b){if(typeof b!=\"string\"||!b)return null;b=e.trim(b);if(a.JSON&&a.JSON.parse)return a.JSON.parse(b);if(n.test(b.replace(o,\"@\").replace(p,\"]\").replace(q,\"\")))return(new Function(\"return \"+b))();e.error(\"Invalid JSON: \"+b)},parseXML:function(c){var d,f;try{a.DOMParser?(f=new DOMParser,d=f.parseFromString(c,\"text/xml\")):(d=new ActiveXObject(\"Microsoft.XMLDOM\"),d.async=\"false\",d.loadXML(c))}catch(g){d=b}(!d||!d.documentElement||d.getElementsByTagName(\"parsererror\").length)&&e.error(\"Invalid XML: \"+c);return d},noop:function(){},globalEval:function(b){b&&j.test(b)&&(a.execScript||function(b){a.eval.call(a,b)})(b)},camelCase:function(a){return a.replace(w,\"ms-\").replace(v,x)},nodeName:function(a,b){return a.nodeName&&a.nodeName.toUpperCase()===b.toUpperCase()},each:function(a,c,d){var f,g=0,h=a.length,i=h===b||e.isFunction(a);if(d){if(i){for(f in a)if(c.apply(a[f],d)===!1)break}else for(;g"}],"posts":[{"title":"为什么要写独立博客？","slug":"为什么要写独立博客？","date":"2018-07-13T23:18:45.000Z","updated":"2018-07-13T23:34:41.915Z","comments":true,"path":"为什么要写独立博客？/","link":"","permalink":"https://www.zqily.com/为什么要写独立博客？/","excerpt":"","text":"如果你有一个绝佳的长期写作idea，你会选在哪里发布？微信公众号？知乎？微博？Lofter?简书？Medium？博客？慢着，既然有前面那么多既简单好用，又具备巨大「网络效应」Network Effect 的内容分发平台（或社区），我为什么还需要博客这种既不性感又不易用的过时玩意儿呢？ 1 为什么要选博客事实上，如今仍然有很多人在坚持自建独立博客，产出内容。大概每个写博客的人都有自己坚持的理由吧。就我而言，首先考虑博客而不是其他平台，至少有以下两点原因。 1.1 对搜索引擎更加友好相较微博、微信等大多数社交媒体平台，博客对搜索引擎更加友好，也更加开放。多数第三方社交平台，或多或少地会存在搜索引擎收录的问题。而你作为使用者，能为搜索引擎优化做的事情也相当有限。 也许，相较于其他社区平台的「网络效应」而言，对搜索引擎更友好和开放，可能并不意味着单位时间里更多的流量，但无疑会使得内容可能的覆盖范围更广。而当时间作为横坐标单位时，小流量积累起来的长尾亦会相当可观。 1.2 弱化社交利于专注内容生产如果你想在微博、微信这些社交媒体上创作内容，除非完全不利用原先积累的社交资源，否则势必受其影响。为了完成在新媒体平台上的「自我形象管理」，你在内容生产的时候，或多或少地会被受众特征和形象管理意图所左右。 与之相对的，博客虽然是一个开放互动平台，但它的互动是基于内容产生的。而且由于博客在社交方面的弱化（或者说不突出），用户因而可以完全免于社交因素的影响，专注于内容创作。 2 为什么要自建独立博客好吧，写博就写博吧，可为啥非得自建独立博客？要说独立博客和托管博客比有啥好处，一言以蔽之：爽。 2.1 独立博客是一个自由空间相较于托管博客，独立博客有更多的自主权。自建博客和托管博客的关系，就好比是买房子与租房子的关系。选择租房子，你可以付出更少，入住更方便，可以在有限制的自由里装饰你租来的屋子。但是你所拥有的，是使用权而不是所有权。 而若自建博客，一年换两套装修风格没问题。只要你高兴，甚至在房里堆满大便都是你的自由。你说我特么没事干嘛在自家堆满大便。对，你没必要，但你有这个自由。知道自己享有这种自由，难道不是一件很爽的事么？ 2.2 自建独立博客很GEEK如果你是程序猿，没个独立技术博客出门都不好意思跟人打招呼。事实上，虽然没有确切的数据，但是鉴于自建博客有一定的技术门槛，小白们想要自建独立博客需要耗费大量的时间成本，所以独立博客中应该多数是技术博客。 如果你是个技术小白，当别人问你最近忙啥时，你轻描淡写地说，最近对Web开发有点兴趣，自己搭了个独立博客玩。这个逼装的简直可以给10分，不怕你骄傲。旁人看来，你简直GEEK到不行，然而你真正要做的，只是找一篇合适且详细的教程，一步一步照着做。 3 如何自建独立博客说了半天为啥要建，该说说怎么建了。当然，如果你有能力、有功夫自己从零开始配置服务器、搭建博客框架敬请忽视。以下部分仅供略懂以及不懂Web开发的人参考。 3.1 独立博客搭建方法介绍搭建独立博客有很多方法，下面具体对比几种比较常见的、我在搭建个人博客时考虑过的方法。 方式 技术门槛 服务器购买 服务器配置 域名备案 访问速度 费用 WordPress 中 需要 自行配置 可免 视服务器而定 视服务器而定 Jekyll 中 不用 GitHub Page 可免 较快 低 Hexo 中低 不用 GitHub Page 可免 较快 低 Ghost 低 不用 不用 可免 较快 高 Farbox 低 不用 不用 可免 快 中 如果想要经历完整的建站流程，而又比较习惯图形界面的管理后台，可以选择WordPress。WordPress现在仍然是全球范围内最流行的博客内容管理工具（CMS）。不过，由于要自行购买服务器空间和配置，有一定难度。 Hexo和Jekyll都是静态博客框架，利用GitHub Page的免费空间，搭建起来要比WordPress省事不少，而且也是上述所有方案中最节约成本的。另外，两者都支持Markdown文本，作为博客平台，更加专注高效的内容管理也要胜于WordPress。 Ghost和Farbox是上述方案中最为简单易用的，几乎没有技术门槛。不用考虑服务器端的种种，支持Markdown文本，通过云服务同步。但是，在提供省心服务的同时，也需要收取相应的服务费用。 3.2 利用GitHub Page搭建博客如果从上述几种方案中做选择，我个人更推荐利用GitHub Page和静态博客框架的方法。因为一来节约费用支出，二来域名免备案的同时、在全球范围的访问速度又都还不错，第三，利用GitHub Page进行服务器配置和文件上传也足够方便。 知乎是这样介绍GitHub Pages的： Github Pages允许用户的任何一个Repo的gh-pages分支上的代码可以经由HTTP访问到。类似提供了静态文件服务。你可以用Github Pages搭建博客，也可以把项目的文档和主页放在上面。 GitHub Page本身也支持你利用它的免费空间写博客，官方推荐Jekyll作为博客框架来写作。具体的设置教程可以参考阮一峰老师的这篇博文→搭建一个免费的，无限流量的Blog—-github Pages和Jekyll入门。 而上文提到的Hexo是湾湾同胞开发的静态博客框架，基于Node.js，相较于Jekyll，页面渲染生成更快，配置部署也更为简单。具体详尽的设置教程，Win可以参考这篇→Windows下用github+Hexo（Next主题）搭建博客Blog，Mac可以更为方便，可以直接使用Mweb即可。 除了上述两种框架外，还有Octopress等其他基于GitHub Page的博客框架。有兴趣的话可以横向对比探索。另外要善用GitHub Page的话，可能还需要掌握一些Git相关的知识，这点可以参考廖雪峰老师的→Git教程，或者Udacity的线上课程→How to use Git and GitHub。 不过GitHub Page也并非完美无缺，至少在墙内使用的话，面临的一大问题是无法被百度收录。因为GitHub禁用了百度爬虫。据说是因为百度爬虫爬得太凶猛，已经对GitHub可用性造成了影响。好吧，又多了一个和百度说再见的理由。","categories":[{"name":"hexo","slug":"hexo","permalink":"https://www.zqily.com/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://www.zqily.com/tags/hexo/"},{"name":"碎碎念","slug":"碎碎念","permalink":"https://www.zqily.com/tags/碎碎念/"}]},{"title":"HexoEditor编写MarkDown自动上传替换七牛外链","slug":"HexoEditor编写MarkDown自动上传替换七牛外链","date":"2018-07-13T16:18:45.000Z","updated":"2018-07-13T16:51:45.502Z","comments":true,"path":"HexoEditor编写MarkDown自动上传替换七牛外链/","link":"","permalink":"https://www.zqily.com/HexoEditor编写MarkDown自动上传替换七牛外链/","excerpt":"","text":"引言继之前介绍的如何搭建个人博客，如何完善博客各种功能，今天来介绍一下配合Hexo框架和Next主题来写文章的利器——HexoEditor。以及用七牛云保存图片，并用外链的方式在Hexo文章中显示图片。 环境 os: Windows HexoEditorHexoEditor是一款配和Hexo框架和Next主题，写Markdown文章的编辑器。废话不多说，先上GitHub地址。 GitHub 安装安装的话可以看这里，我有介绍过。 打开在HexoEditor的根目录（根目录下有app,doc,icons等文件夹）下面，打开Git Bash，执行命令： npm start 等一会儿就会出现HexoEditor编辑器。点击左下角会出现菜单栏。 如果要写博文，就新建Post。 新建的文章会根据/yoursite/scaffolds/post.md模板自动生成一些内容，其实也就是这个文件的内容，如果想修改模板，就直接修改这个就行了。 设置写文章的话，左边写，右边就会实时显示样式。没什么好讲的，所以重点讲一讲这个设置里面的图片设置（以七牛云为例）。 为什么要重点讲这个图片设置？写文章的时候，图片有两种方式展现在页面上，一种是从本地读取，一种是从一个外链上读取。本地读取的话，图片都保存在Coding上面，很占用空间，速度也不快。所以一般选择将图片保存在七牛云或者别的地方，然后通过外链调用。 默认资源库：把你放在文章里面的图片存到这个目录下，可以在任意位置。 云图类型：七牛云、腾通自己选。 Access Key：从你七牛云或者百度云获取。 Secret Key：同上。 下面两个在填完上面两个Key之后会自动生成。 七牛云要使用七牛云，当然是先注册一个啦，点击进入注册页面。实话实说，这是我的邀请链接，可以帮我增加每个月的下载流量。 注册好了之后，找到对象存储-&gt;立即添加。 很好，会提示你实名验证，那就只有老老实实的实名验证啦~验证时间大概是两到三天，可以先收藏着我的文章，验证好了再来看~XD 验证好了之后，填好创建信息，确定创建。然后点击右上角个人面板，密钥管理 可以看到两个Key的值 这两个值就是刚刚HexoEditor的图片设置里面要填的。 How to use?怎么用这个图床功能呢？ 用HexoEditor写文章的时候，将你的图片直接复制，或者写： 1![](图片绝对路径) 然后右键，上传七牛云，接下来就是I have a HexoEditor, I have a qiniu, Bang! 你会发现 这样的路径图片会变成一个外链图片 打完收工！","categories":[{"name":"hexo","slug":"hexo","permalink":"https://www.zqily.com/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://www.zqily.com/tags/hexo/"}]},{"title":"Windows下用github+Hexo（Next主题）搭建博客Blog","slug":"Windows下用github+Hexo（Next主题）搭建博客Blog","date":"2018-07-13T16:18:45.000Z","updated":"2018-07-13T16:32:47.540Z","comments":true,"path":"Windows下用github+Hexo（Next主题）搭建博客Blog/","link":"","permalink":"https://www.zqily.com/Windows下用github+Hexo（Next主题）搭建博客Blog/","excerpt":"","text":"处女博文，就写一下这个个人Blog是如何搭建起来的吧。本文只讲解在Windows环境下如何搭建。 说起来想要搭建这样一个Blog还是因为我特别喜欢这个主题Next，所以索性就自己搭一个啦。 需要准备的东西 Node.js（点击可进入下载页面，两个版本都行，我选的最新的版本） Git（点击进去直接下载，附赠一个Git 安装教程） Hexo 官方使用文档（有什么更详细的想了解可以上官网，右上角可以选中文） Next 主题官网（官网上有很多详细的配置说明和设定教程） HexoEditor（用于编写Markdown 文章的软件，配合Hexo食用） Notepad++（Windows下记事本的替代品，因为记事本保存的时候会在每一行的开头还是结尾加一个什么标记，会导致有些文件用记事本打开之后再保存会出问题） Git Bash 相关的一点点小知识，和命令行使用方法一样。（这个我写在最后面，如果不会的话请看一看） 如果以下步骤哪里出了问题，欢迎留言，留言时请填上邮箱，你就可以收到我的回复了。PS：邮件回复可能会被收进垃圾箱，请注意。 开始搭建安装依赖所谓的依赖就是搭建博客需要的一些基层的软件，包括Node.js和Git，这两个东西在上面已经给出了下载链接，安装的话对于Windows用户应该不算难题吧。 安装Hexo安装好Git之后，任意空白处鼠标右键，会出现Git Bash Here。点击Git Bash Here会出现Git Bash对话框。 新建一个文件夹，用于保存Hexo生成的博客内容。（将这个文件夹成为Hexo文件夹）然后进入该文件夹，空白处右键，点击Git Bash Here，输入命令 | npm install -g hexo-cli | 如果没有报错，继续输入 | hexo init | 代表的是保存目录，如果不填会在当前目录下生成Hexo框架所需要的文件。 命令执行完成后，文件夹下的目录结构如下： | .├── _config.yml├── package.json├── scaffolds├── source| ├── _drafts| └── _posts└── themes | 其中_config.yml为配置文件，后面会用到。 验证一下是否安装成功。在刚刚的Git Bash对话框中输入命令 | hexo g | 等待完成后再输入命令 | hexo s | 然后打开浏览器，输入localhost:4000。如果成功看见博客就证明安装成功。 成功后在刚刚的Git Bash对话框中按下Ctrl+c停止服务。 安装Next主题进入Hexo文件夹（上文提到过，这个目录下可以看到一个themes文件夹），在Hexo文件夹空白处右键打开Git Bash Here，输入命令 | git clone https://github.com/theme-next/hexo-theme-next themes/next | 没有报错（红色的er），就证明已经安装好了Next主题。 将Hexo的主题更改为Next主题在Hexo文件夹下面可以看到一个_config.yml文件，右键用Notepad++打开（用记事本打开不知道会不会出问题，建议用Notepad++），靠下面的位置寻找 | theme: landscape | 将里面的landscape改成next | theme: next | 然后和Hexo里面验证是否安装成功一样的步骤，可以检验主题是否更改成功。 在Hexo文件夹里面打开Git Bash对话框，输入命令 | hexo clean -g | 等待完成后再输入命令 | hexo s | 然后打开浏览器，输入localhost:4000。如果成功看到主题更改了，记得在刚刚的Git Bash对话框中按下Ctrl+c停止服务。 部署Hexo现在我们可以在本地显示自己博客了，可是创建博客就是给人看的呀，那接下来就把我们的博客部署到网上。在没有自己的服务器的情况下，大致的选择方案有两种： 部署到GitHub上 部署到Coding上 因为GitHub不让百度爬虫，影响百度收录，然后服务器在国外，速度也慢，所以推荐Coding。 首先当然是得拥有一个Coding账号啦~，点击我注册。 用户名一定不要有奇奇怪怪的符号！特别是下划线！影响收录！所以最好不要符号！ 注册登录之后，右上角加号点击项目，新建一个项目 项目名称一定要用[你的用户名].coding.me，比如用用户名为dugblog，项目名就填dugblog.coding.me。 新建好了之后，会进入项目页面，点击左侧代码-&gt;Pages服务 在部署来源里面选择master分支，保存 保存好了之后，会出现这样的提示 上图框出来的地址，就是你的博客地址，而且是一个一级目录，如果你的最后还有一个斜杠然后一串名称（例如：http://DugBlog.coding.me/abcd），请检查项目名称是否填对。 然后在左侧可以找到这个 复制下来，打开站点配置文件，也就是/yoursite/_config.yml，和source平级目录下的那个。找到deploy，更改里面的配置： | deploy: type: git # 必须填git repo: # https://用户名:密码@刚刚复制的链接去掉https:// repo示例 https://myblog:123456@git.coding.net/myblog/myblog.coding.me.git branch: master # 刚刚选择的分支，不懂就填这个 message: blog update # 每次更新时提交的备注 | 填好保存好，在Hexo根目录下打开Git Bash，先后执行命令： | hexo cleanhexo g -d | 再回到刚刚的Pages服务页面，点开自己的博客地址，就应该可以看到你的博客了。 HexoEditor安装首先找一个地方，新建一个文件夹用来放HexoEditor的文件。进入文件夹，右键打开Git Bash对话框，依次输入下面的命令： | npm config set registry “https://registry.npm.taobao.org/&quot;npm config set electron_mirror “https://npm.taobao.org/mirrors/electron/&quot; git clone https://github.com/zhuzhuyule/HexoEditor.gitcd HexoEditornpm install | 如果没报错，就是安装成功。而且会在你刚刚新建的目录下面生成一个HexoEditor目录。那么如何打开HexoEditor呢？ 进入到HexoEditor的目录里面，右键打开Git Bash对话框，输入如下命令启动HexoEditor: | npm start | 关于Git Bash如果你来看这个，我默认你不怎么懂命令行，不打算深讲，只讲一点相关的内容。 在上述教程中，很多时候我会有一个操作，就是在某一个文件夹里面，空白处右键打开Git Bash。可能有的同学会有疑问，在不同的地方打开会有什么不同吗？是的！可以说完全不同！而且影响很严重。 你仔细观察会发现，$这个符号上面一行最后面，有一个目录 你在哪里打开的，这个目录就会是什么。而且你执行的所有命令，都会基于这个目录来执行。可以百度一下命令行和cd命令，会有更深的理解。","categories":[{"name":"hexo","slug":"hexo","permalink":"https://www.zqily.com/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://www.zqily.com/tags/hexo/"},{"name":"markdown","slug":"markdown","permalink":"https://www.zqily.com/tags/markdown/"}]},{"title":"Markdown 语法说明 (简体中文版)","slug":"Markdown 语法说明 (简体中文版)","date":"2018-07-13T16:18:45.000Z","updated":"2018-07-14T16:22:56.483Z","comments":true,"path":"Markdown 语法说明 (简体中文版)/","link":"","permalink":"https://www.zqily.com/Markdown 语法说明 (简体中文版)/","excerpt":"","text":"Markdown 语法说明 (简体中文版) / (点击查看快速入门) 概述 宗旨 兼容 HTML 特殊字符自动转换 区块元素 段落和换行 标题 区块引用 列表 代码区块 分隔线 区段元素 链接 强调 代码 图片 其它 反斜杠 自动链接 感谢 Markdown 免费编辑器 概述宗旨Markdown 的目标是实现「易读易写」。 可读性，无论如何，都是最重要的。一份使用 Markdown 格式撰写的文件应该可以直接以纯文本发布，并且看起来不会像是由许多标签或是格式指令所构成。Markdown 语法受到一些既有 text-to-HTML 格式的影响，包括 Setext、atx、Textile、reStructuredText、Grutatext 和 EtText，而最大灵感来源其实是纯文本电子邮件的格式。 总之， Markdown 的语法全由一些符号所组成，这些符号经过精挑细选，其作用一目了然。比如：在文字两旁加上星号，看起来就像强调。Markdown 的列表看起来，嗯，就是列表。Markdown 的区块引用看起来就真的像是引用一段文字，就像你曾在电子邮件中见过的那样。 兼容 HTMLMarkdown 语法的目标是：成为一种适用于网络的_书写_语言。 Markdown 不是想要取代 HTML，甚至也没有要和它相近，它的语法种类很少，只对应 HTML 标记的一小部分。Markdown 的构想_不是要使得 HTML 文档更容易书写。在我看来， HTML 已经很容易写了。Markdown 的理念是，能让文档更容易读、写和随意改。HTML 是一种发布的格式，Markdown 是一种书写_的格式。就这样，Markdown 的格式语法只涵盖纯文本可以涵盖的范围。 不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。不需要额外标注这是 HTML 或是 Markdown；只要直接加标签就可以了。 要制约的只有一些 HTML 区块元素――比如 、、、 等标签，必须在前后加上空行与其它内容区隔开，还要求它们的开始标签与结尾标签不能用制表符或空格来缩进。Markdown 的生成器有足够智能，不会在 HTML 区块标签外加上不必要的 标签。 例子如下，在 Markdown 文件里加上一段 HTML 表格： 1234567这是一个普通段落。 Foo 这是另一个普通段落。 请注意，在 HTML 区块标签间的 Markdown 格式语法将不会被处理。比如，你在 HTML 区块内使用 Markdown 样式的*强调*会没有效果。 HTML 的区段（行内）标签如 、、可以在 Markdown 的段落、列表或是标题里随意使用。依照个人习惯，甚至可以不用 Markdown 格式，而直接采用 HTML 标签来格式化。举例说明：如果比较喜欢 HTML 的 或 标签，可以直接使用这些标签，而不用 Markdown 提供的链接或是图像标签语法。 和处在 HTML 区块标签间不同，Markdown 语法在 HTML 区段标签间是有效的。 特殊字符自动转换在 HTML 文件中，有两个字符需要特殊处理： &lt; 和 &amp; 。 &lt; 符号用于起始标签，&amp; 符号则用于标记 HTML 实体，如果你只是想要显示这些字符的原型，你必须要使用实体的形式，像是 &lt; 和 &amp;。 &amp; 字符尤其让网络文档编写者受折磨，如果你要打「AT&amp;T」 ，你必须要写成「AT&amp;T」。而网址中的 &amp; 字符也要转换。比如你要链接到： 1http://images.google.com/images?num=30&amp;q=larry+bird 你必须要把网址转换写为： 1http://images.google.com/images?num=30&amp;q=larry+bird 才能放到链接标签的 href 属性里。不用说也知道这很容易忽略，这也可能是 HTML 标准检验所检查到的错误中，数量最多的。 Markdown 让你可以自然地书写字符，需要转换的由它来处理好了。如果你使用的 &amp; 字符是 HTML 字符实体的一部分，它会保留原状，否则它会被转换成 &amp;;。 所以你如果要在文档中插入一个版权符号 ©，你可以这样写： 1© Markdown 会保留它不动。而若你写： 1AT&amp;T Markdown 就会将它转为： 1AT&amp;T 类似的状况也会发生在 &lt; 符号上，因为 Markdown 允许 兼容 HTML ，如果你是把 &lt; 符号作为 HTML 标签的定界符使用，那 Markdown 也不会对它做任何转换，但是如果你写： 14 &lt; 5 Markdown 将会把它转换为： 14 &lt; 5 不过需要注意的是，code 范围内，不论是行内还是区块， &lt; 和 &amp; 两个符号都_一定_会被转换成 HTML 实体，这项特性让你可以很容易地用 Markdown 写 HTML code （和 HTML 相对而言， HTML 语法中，你要把所有的 &lt; 和 &amp; 都转换为 HTML 实体，才能在 HTML 文件里面写出 HTML code。） 区块元素段落和换行一个 Markdown 段落是由一个或多个连续的文本行组成，它的前后要有一个以上的空行（空行的定义是显示上看起来像是空的，便会被视为空行。比方说，若某一行只包含空格和制表符，则该行也会被视为空行）。普通段落不该用空格或制表符来缩进。 「由一个或多个连续的文本行组成」这句话其实暗示了 Markdown 允许段落内的强迫换行（插入换行符），这个特性和其他大部分的 text-to-HTML 格式不一样（包括 Movable Type 的「Convert Line Breaks」选项），其它的格式会把每个换行符都转成 标签。 如果你_确实_想要依赖 Markdown 来插入 标签的话，在插入处先按入两个以上的空格然后回车。 的确，需要多费点事（多加空格）来产生 ，但是简单地「每个换行都转换为」的方法在 Markdown 中并不适合， Markdown 中 email 式的 区块引用 和多段落的 列表 在使用换行来排版的时候，不但更好用，还更方便阅读。 标题Markdown 支持两种标题的语法，类 Setext 和类 atx 形式。 类 Setext 形式是用底线的形式，利用 = （最高阶标题）和 - （第二阶标题），例如： 12345This is an H1=============This is an H2------------- 任何数量的 = 和 - 都可以有效果。 类 Atx 形式则是在行首插入 1 到 6 个 # ，对应到标题 1 到 6 阶，例如： 12345# 这是 H1## 这是 H2###### 这是 H6 你可以选择性地「闭合」类 atx 样式的标题，这纯粹只是美观用的，若是觉得这样看起来比较舒适，你就可以在行尾加上 #，而行尾的 # 数量也不用和开头一样（行首的井字符数量决定标题的阶数）： 12345# 这是 H1 ### 这是 H2 ##### 这是 H3 ###### 区块引用 BlockquotesMarkdown 标记区块引用是使用类似 email 中用 &gt; 的引用方式。如果你还熟悉在 email 信件中的引言部分，你就知道怎么在 Markdown 文件中建立一个区块引用，那会看起来像是你自己先断好行，然后在每行的最前面加上 &gt; ： 123456&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,&gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.&gt; Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.&gt; &gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse&gt; id sem consectetuer libero luctus adipiscing. Markdown 也允许你偷懒只在整个段落的第一行最前面加上 &gt; ： 123456&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisseid sem consectetuer libero luctus adipiscing. 区块引用可以嵌套（例如：引用内的引用），只要根据层次加上不同数量的 &gt; ： 12345&gt; This is the first level of quoting.&gt;&gt; &gt; This is nested blockquote.&gt;&gt; Back to the first level. 引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等： 12345678&gt; ## 这是一个标题。&gt; &gt; 1\\. 这是第一行列表项。&gt; 2\\. 这是第二行列表项。&gt; &gt; 给出一些例子代码：&gt; &gt; return shell_exec(&quot;echo $input | $markdown_script&quot;); 任何像样的文本编辑器都能轻松地建立 email 型的引用。例如在 BBEdit 中，你可以选取文字后然后从选单中选择增加引用阶层。 列表Markdown 支持有序列表和无序列表。 无序列表使用星号、加号或是减号作为列表标记： 123* Red* Green* Blue 等同于： 123+ Red+ Green+ Blue 也等同于： 123- Red- Green- Blue 有序列表则使用数字接着一个英文句点： 1231\\. Bird2\\. McHale3\\. Parish 很重要的一点是，你在列表标记上使用的数字并不会影响输出的 HTML 结果，上面的列表所产生的 HTML 标记为： 1234BirdMcHaleParish 如果你的列表标记写成： 1231\\. Bird1\\. McHale1\\. Parish 或甚至是： 1233\\. Bird1\\. McHale8\\. Parish 你都会得到完全相同的 HTML 输出。重点在于，你可以让 Markdown 文件的列表数字和输出的结果相同，或是你懒一点，你可以完全不用在意数字的正确性。 如果你使用懒惰的写法，建议第一个项目最好还是从 1. 开始，因为 Markdown 未来可能会支持有序列表的 start 属性。 列表项目标记通常是放在最左边，但是其实也可以缩进，最多 3 个空格，项目标记后面则一定要接着至少一个空格或制表符。 要让列表看起来更漂亮，你可以把内容用固定的缩进整理好： 12345* Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.* Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse id sem consectetuer libero luctus adipiscing. 但是如果你懒，那也行： 12345* Lorem ipsum dolor sit amet, consectetuer adipiscing elit.Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,viverra nec, fringilla in, laoreet vitae, risus.* Donec sit amet nisl. Aliquam semper ipsum sit amet velit.Suspendisse id sem consectetuer libero luctus adipiscing. 如果列表项目间用空行分开，在输出 HTML 时 Markdown 就会将项目内容用 标签包起来，举例来说： 12* Bird* Magic 会被转换为： 123BirdMagic 但是这个： 123* Bird* Magic 会被转换为： 123BirdMagic 列表项目可以包含多个段落，每个项目下的段落都必须缩进 4 个空格或是 1 个制表符： 1234567891\\. This is a list item with two paragraphs. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. Donec sit amet nisl. Aliquam semper ipsum sit amet velit.2\\. Suspendisse id sem consectetuer libero luctus adipiscing. 如果你每行都有缩进，看起来会看好很多，当然，再次地，如果你很懒惰，Markdown 也允许： 1234567* This is a list item with two paragraphs. This is the second paragraph in the list item. You&apos;reonly required to indent the first line. Lorem ipsum dolorsit amet, consectetuer adipiscing elit.* Another item in the same list. 如果要在列表项目内放进引用，那 &gt; 就需要缩进： 1234* A list item with a blockquote: &gt; This is a blockquote &gt; inside a list item. 如果要放代码区块的话，该区块就需要缩进_两次_，也就是 8 个空格或是 2 个制表符： 123* 一列表项包含一个列表区块： &lt;代码写在这&gt; 当然，项目列表很可能会不小心产生，像是下面这样的写法： 11986\\. What a great season. 换句话说，也就是在行首出现数字-句点-空白，要避免这样的状况，你可以在句点前面加上反斜杠。 11986\\. What a great season. 代码区块和程序相关的写作或是标签语言原始码通常会有已经排版好的代码区块，通常这些区块我们并不希望它以一般段落文件的方式去排版，而是照原来的样子显示，Markdown 会用 和 标签来把代码区块包起来。 要在 Markdown 中建立代码区块很简单，只要简单地缩进 4 个空格或是 1 个制表符就可以，例如，下面的输入： 123这是一个普通段落： 这是一个代码区块。 Markdown 会转换成： 123这是一个普通段落：这是一个代码区块。 这个每行一阶的缩进（4 个空格或是 1 个制表符），都会被移除，例如： 12345Here is an example of AppleScript: tell application &quot;Foo&quot; beep end tell 会被转换为： 12345Here is an example of AppleScript:tell application &quot;Foo&quot; beepend tell 一个代码区块会一直持续到没有缩进的那一行（或是文件结尾）。 在代码区块里面， &amp; 、 &lt; 和 &gt; 会自动转成 HTML 实体，这样的方式让你非常容易使用 Markdown 插入范例用的 HTML 原始码，只需要复制贴上，再加上缩进就可以了，剩下的 Markdown 都会帮你处理，例如： 12 © 2004 Foo Corporation 会被转换为： 123&lt;div class=&quot;footer&quot;&gt; &amp;copy; 2004 Foo Corporation&lt;/div&gt; 代码区块中，一般的 Markdown 语法不会被转换，像是星号便只是星号，这表示你可以很容易地以 Markdown 语法撰写 Markdown 语法相关的文件。 分隔线你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线： 123456789* * *********- - ---------------------------------------- 区段元素链接Markdown 支持两种形式的链接语法： 行内式和参考式两种形式。 不管是哪一种，链接文字都是用 [方括号] 来标记。 要建立一个行内式的链接，只要在方块括号后面紧接着圆括号并插入网址链接即可，如果你还想要加上链接的 title 文字，只要在网址后面，用双引号把 title 文字包起来即可，例如： 123This is [an example](http://example.com/ &quot;Title&quot;) inline link.[This link](http://example.net/) has no title attribute. 会产生： 12345This is an example inline link.This link has notitle attribute. 如果你是要链接到同样主机的资源，你可以使用相对路径： 1See my [About](/about/) page for details. 参考式的链接是在链接文字的括号后面再接上另一个方括号，而在第二个方括号里面要填入用以辨识链接的标记： 1This is [an example][id] reference-style link. 你也可以选择性地在两个方括号中间加上一个空格： 1This is [an example] [id] reference-style link. 接着，在文件的任意处，你可以把这个标记的链接内容定义出来： 1[id]: http://example.com/ &quot;Optional Title Here&quot; 链接内容定义的形式为： 方括号（前面可以选择性地加上至多三个空格来缩进），里面输入链接文字 接着一个冒号 接着一个以上的空格或制表符 接着链接的网址 选择性地接着 title 内容，可以用单引号、双引号或是括弧包着 下面这三种链接的定义都是相同： 123[foo]: http://example.com/ &quot;Optional Title Here&quot;[foo]: http://example.com/ &apos;Optional Title Here&apos;[foo]: http://example.com/ (Optional Title Here) 请注意：有一个已知的问题是 Markdown.pl 1.0.1 会忽略单引号包起来的链接 title。 链接网址也可以用尖括号包起来： 1[id]: &quot;Optional Title Here&quot; 你也可以把 title 属性放到下一行，也可以加一些缩进，若网址太长的话，这样会比较好看： 12[id]: http://example.com/longish/path/to/resource/here &quot;Optional Title Here&quot; 网址定义只有在产生链接的时候用到，并不会直接出现在文件之中。 链接辨别标签可以有字母、数字、空白和标点符号，但是并_不_区分大小写，因此下面两个链接是一样的： 12[link text][a][link text][A] 隐式链接标记功能让你可以省略指定链接标记，这种情形下，链接标记会视为等同于链接文字，要用隐式链接标记只要在链接文字后面加上一个空的方括号，如果你要让 “Google” 链接到 google.com，你可以简化成： 1[Google][] 然后定义链接内容： 1[Google]: http://google.com/ 由于链接文字可能包含空白，所以这种简化型的标记内也许包含多个单词： 1Visit [Daring Fireball][] for more information. 然后接着定义链接： 1[Daring Fireball]: http://daringfireball.net/ 链接的定义可以放在文件中的任何一个地方，我比较偏好直接放在链接出现段落的后面，你也可以把它放在文件最后面，就像是注解一样。 下面是一个参考式链接的范例： 123456I get 10 times more traffic from [Google] [1] than from[Yahoo] [2] or [MSN] [3]. [1]: http://google.com/ &quot;Google&quot; [2]: http://search.yahoo.com/ &quot;Yahoo Search&quot; [3]: http://search.msn.com/ &quot;MSN Search&quot; 如果改成用链接名称的方式写： 123456I get 10 times more traffic from [Google][] than from[Yahoo][] or [MSN][]. [google]: http://google.com/ &quot;Google&quot; [yahoo]: http://search.yahoo.com/ &quot;Yahoo Search&quot; [msn]: http://search.msn.com/ &quot;MSN Search&quot; 上面两种写法都会产生下面的 HTML。 123I get 10 times more traffic from Google than fromYahooor MSN. 下面是用行内式写的同样一段内容的 Markdown 文件，提供作为比较之用： 123I get 10 times more traffic from [Google](http://google.com/ &quot;Google&quot;)than from [Yahoo](http://search.yahoo.com/ &quot;Yahoo Search&quot;) or[MSN](http://search.msn.com/ &quot;MSN Search&quot;). 参考式的链接其实重点不在于它比较好写，而是它比较好读，比较一下上面的范例，使用参考式的文章本身只有 81 个字符，但是用行内形式的却会增加到 176 个字元，如果是用纯 HTML 格式来写，会有 234 个字元，在 HTML 格式中，标签比文本还要多。 使用 Markdown 的参考式链接，可以让文件更像是浏览器最后产生的结果，让你可以把一些标记相关的元数据移到段落文字之外，你就可以增加链接而不让文章的阅读感觉被打断。 强调Markdown 使用星号（*）和底线（_）作为标记强调字词的符号，被 * 或 _ 包围的字词会被转成用 标签包围，用两个 `*` 或 `_` 包起来的话，则会被转成，例如： 1234567*single asterisks*_single underscores_**double asterisks**__double underscores__ 会转成： 1234567single asteriskssingle underscoresdouble asterisksdouble underscores 你可以随便用你喜欢的样式，唯一的限制是，你用什么符号开启标签，就要用什么符号结束。 强调也可以直接插在文字中间： 1un*frigging*believable 但是如果你的 * 和 _ 两边都有空白的话，它们就只会被当成普通的符号。 如果要在文字前后直接插入普通的星号或底线，你可以用反斜线： 1\\*this text is surrounded by literal asterisks\\* 代码如果要标记一小段行内代码，你可以用反引号把它包起来（12 Use the printf() function. 12会产生： Use the printf() function. 12如果要在代码区段内插入反引号，你可以用多个反引号来开启和结束代码区段： There is a literal backtick (`) here. 12这段语法会产生： There is a literal backtick (`) here. 12代码区段的起始和结束端都可以放入一个空白，起始端后面一个，结束端前面一个，这样你就可以在区段的一开始就插入反引号： A single backtick in a code span: ` A backtick-delimited string in a code span: `foo` 12会产生： A single backtick in a code span: ` A backtick-delimited string in a code span: foo 12在代码区段内，`&amp;` 和尖括号**都**会被自动地转成 HTML 实体，这使得插入 HTML 原始码变得很容易，Markdown 会把下面这段： Please don’t use any tags. 12转为： Please don’t use any tags. 12你也可以这样写： — is the decimal-encoded equivalent of —. 12以产生： &#8212; is the decimal-encodedequivalent of &mdash;. 12345678### 图片很明显地，要在纯文字应用中设计一个「自然」的语法来插入图片是有一定难度的。Markdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： _行内式_和_参考式_。行内式的图片语法看起来像是： 12345678详细叙述如下：* 一个惊叹号 `!`* 接着一个方括号，里面放上图片的替代文字* 接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上 选择性的 &apos;title&apos; 文字。参考式的图片语法则长得像这样： 12「id」是图片参考的名称，图片参考的定义方式则和连结参考一样： 12345678910到目前为止， Markdown 还没有办法指定图片的宽高，如果你需要的话，你可以使用普通的 `` 标签。* * *## 其它### 自动链接Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用尖括号包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如： 12Markdown 会转为： http://example.com/ 12邮址的自动链接也很类似，只是 Markdown 会先做一个编码转换的过程，把文字字符转成 16 进位码的 HTML 实体，这样的格式可以糊弄一些不好的邮址收集机器人，例如： 12Markdown 会转成： address@example.com 12345678在浏览器里面，这段字串（其实是 `address@example.com`）会变成一个可以点击的「address@example.com」链接。（这种作法虽然可以糊弄不少的机器人，但并不能全部挡下来，不过总比什么都不做好些。不管怎样，公开你的信箱终究会引来广告信件的。）### 反斜杠Markdown 可以利用反斜杠来插入一些在语法中有其它意义的符号，例如：如果你想要用星号加在文字旁边的方式来做出强调效果（但不用 `` 标签），你可以在星号的前面加上反斜杠： *literal asterisks* 12Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号： \\ 反斜线` 反引号 星号_ 底线{} 花括号[] 方括号() 括弧井字号 加号 减号. 英文句点! 惊叹号 `","categories":[{"name":"hexo","slug":"hexo","permalink":"https://www.zqily.com/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://www.zqily.com/tags/hexo/"},{"name":"markdown","slug":"markdown","permalink":"https://www.zqily.com/tags/markdown/"}]}]}